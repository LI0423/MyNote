一、Dubbo简介
    Dubbo是一款高性能、轻量级的开源RPC框架，提供服务自动注册、自动发现等高效服务治理方案，可以和spring框架无缝集成。
1、Dubbo使用场景
（1）透明化的远程方法调用：就像调用本地方法一样调用远程方法，只需要简单配置，没有任何API侵入。
（2）软负载均衡及容错机制
（3）服务自动注册与发现：不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。
2.核心功能
（1）Remoting：网络通信框架，提供多种NIO框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。
（2）Cluster：服务框架，提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持、
（3）Registry：服务注册，基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务方可以平滑增加或减少机器。
二、架构设计
1、核心组件
（1）Provider：暴露服务的服务提供方
（2）Consumer：调用远程服务消费方
（3）Registry：服务注册与发现注册中心
（4）Container：服务运行容器
2、服务注册与发现的流程
（1）服务容器Container负责启动，加载，运行服务提供者。
（2）服务提供者Provider在启动时，向注册中心注册自己提供的服务。
（3）服务消费者Consumer在启动时，向注册中心订阅自己所需的服务。
（4）注册中心Registry返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
（5）服务消费者Consumer，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败再选另一台调用。
（6）服务消费者Consumer和提供者Provider，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心Monitor。
3.Dubbo的整体架构设计分层
（1）接口服务层（Service）：该层与业务逻辑相关，根据Provider和Consumer的业务设计对应的接口和实现。
（2）配置层（Config）：对外配置接口，以ServiceConfig和ReferenceConfig为中心。
（3）服务代理层（Proxy）：服务接口透明代理，生成服务的客户端Stub和服务端的Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory。
（4）路由层（Cluster）：封装多个提供者的路由和负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster、Directory、Router和LoadBalance。
（5）