组合模式
    1.定义
        将对象组合成树状的层次结构的模式，用来表示“整体-部分”的关系，使用户对单个对象和组合对象具有一致的访问性。
    2.优缺点
    （1）优点：
        组合模式使得客户端代码可以一直地处理单个对象和组合对象，无须关心自己处理的是单个对象还是组合对象。
        更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码。
    （2）缺点：
        设计复杂
        不容易限制容器中的构件
        不容易用继承的方法来增加构件的新功能
    3.结构
    （1）抽象构件角色：主要作用是为树叶构件和树枝构件声明公共接口，并实现他们的默认行为。在透明式的组合模式中抽象构件还声明访问和管理子类的接口；
        在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。
    （2）树叶构件角色：组合中的叶节点对象，它没有子节点，用于继承或实现抽象构件。
    （3）树枝构件角色：组合中的分支节点对象，有子节点，用于继承和实现抽象构件，主要作用是存储和管理子部件。
    4.实现
    （1）透明方式：由于抽象构件声明了所有子类中的全部方法，客户端无须区别树叶对线和树枝对象，对客户端来说是透明的。
    （2）安全方式：将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有子对象的管理方法，由于叶子和分支有不同的接口，客户端在调用时要知道
    树叶对象和树枝对象的存在，所以失去了透明性。
    interface Component{
        public void add(Component c);

        public void remove(Component c);

        public Component getChild(int i);

        public void operation();
    }

    class Leaf implements Component{
        private String name;

        public Leaf(String name){
            this.name = name;
        }

        public void add(Component c){
        }

        public void remove(Component c){
        }

        public Component getChild(int i){
            return null;
        }

        public void operation(){
            System.out.println("树叶"+name+"：被访问");
        }
    }

    class Composite implements Component{
        private ArrayList<Component> children = new ArrayList<Component>();

        public void add(Component c){
            children.add(c);
        }

        public void remove(Component c){
            children.remove(c);
        }

        public Component getChild(int i){
            return children.get(i);
        }

        public void operation(){
            for(Object obj:children){
                ((Component) obj).operation();
            }
        }
    }

    public class Client {
        public static void main(String[] args) {
            Composite root = new Composite("root");
            Component node1 = new Leaf("1");
            Component node2 = new Composite("2");
            Component node3 = new Leaf("3");
            root.add(node1);
            root.add(node2);
            root.add(node3);
            Component node21 = new Leaf("21");
            Component node22 = new Composite("22");
            node2.add(node21);
            node2.add(node22);
            Component node221 = new Leaf("221");
            node22.add(node221);
        }
    }