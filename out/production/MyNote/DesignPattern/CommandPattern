命令模式
    1.定义
        将一个请求封装成一个对象，使发出的请求和执行请求的责任分隔开。
    2.优缺点
    （1）优点：
        通过引入中间件（抽象接口）降低系统的耦合度。
        扩展性良好，增加或删除命令非常方便。
        可以实现宏命令，命令模式与组合模式结合，将多个命令装配成一个组合命令，即宏命令。
        方便实现Undo和Redo命令。
        可以在现有命令的基础上增加额外功能。
    （2）缺点：
        可能产生大量具体的命令类。
    3.结构
    （1）抽象命令类角色：声明执行命令的接口，拥有执行命令的抽象方法。
    （2）具体命令类角色：是抽象命令类的具体实现类，拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。
    （3）实现者/接收者：执行命令功能的相关操作，是具体命令对象业务的真正实现者。
    （4）调用者/请求者：是请求的发送者，通常拥有很多的命令对象，并通过访问命令对象来执行相关的请求，不直接访问接收者。
    4.实现
    //调用者
    class Invoker {
        private Command Command;

        public Invoker(Command command){
            this.command = command;
        }

        public void setCommand(Command command){
            this.command = command;
        }

        public void call(){
            System.out.println("调用者执行命令command");
            command.execute();
        }
    }

    //抽象命令
    interface Command{
        public abstract void execute();
    }

    //具体命令
    class ConcreteCommand implements Command {
        private Receiver receiver;

        ConcreteCommand(){
            receiver = new Receiver();
        }

        public void execute(){
            receiver.action();
        }
    }

    //接收者
    class Receiver{
        public void action(){
            System.out.println("接收者的action()方法被调用");
        }
    }
