解释器模式
    1.定义
        给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言的句子。
    2.优缺点
    （1）优点：
        扩展性好，由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。
        容易实现，在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易。
    （2）缺点：
        执行效率低，解释器模式中通常使用大量的循环和递归调用，当要解释的句子较为复杂时，其运行速度很慢，且代码的吊饰过程也较为麻烦。
        会引起类膨胀，解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理和维护。
    3，结构
    （1）抽象表达式：定义解释器的接口，约定解释器的解释操作，主要包含解释方法interpret();
    （2）终结符表达式：是抽象表达式的子类，用来实现文法与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。
    （3）非终结符表达式：也是抽象表达式的子类，用来实现文法与非终结符相关的操作，文法中的每条规则都对应于一个非终结表达式。
    （4）环境角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。
    （5）客户端：主要任务是将需要分析的子句或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法。
    4.实现
    //抽象表达式类
    interface AbstractExpression {
        public void interpret(String info); //解释方法
    }

    //终结符表达式
    class TerminalExpress implements AbstractExpression {
        public void interpret(String info){
            //对终结符表达式的处理
        }
    }

    //非终结符表达式类
    class NonterminalExpression implements AbstractExpression {
        private AbstractExpress exp1;
        private AbstractExpress exp2;

        public void interpret(String info){
            //非对终结符表达式的处理
        }
    }

    //环境类
    class Context {
        private AbstractExpression exp;

        public Context(){
            //数据初始化
        }

        public void operation(String info){
            //调用相关表达式类的解释方法
        }
    }