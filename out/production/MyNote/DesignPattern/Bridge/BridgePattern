桥接模式
    1.定义
        将抽象与实现分离，可以独立变化，用组合关系代替继承关系来实现，降低抽象和实现这两个可变维度的耦合。
    2.优缺点
    （1）优点：
        扩展能力强，实现细节对客户透明。
    （2）缺点：
        聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确识别出系统中两个独立变化的维度。
    3.结构
    （1）抽象化角色：定义抽象类，并包含一个对实现化对象的引用。
    （2）扩展抽象化角色：是抽象化角色的子类，实现父类中的业务方法，通过组合关系调用实现化角色中的业务方法。
    （3）实现化角色：定义实现化角色的接口，供扩展抽象化角色调用。
    （4）具体实现化角色：给出实现化角色接口的具体实现。
    4.实现
    //实现化角色
    public interface MsgSender {
        void send(String message);
    }

    //具体实现化角色
    public class TelephoneMsgSender implements MsgSender{

        private List<String> telephones;
    
        public TelephoneMsgSender(List<String> telephones) {
            this.telephones = telephones;
        }
    
        @Override
        public void send(String message) {
            System.out.println("telephone send message " + message);
        }
    }

    //具体实现化角色
    public class EmailMsgSender implements MsgSender{
        private List<String> emailAddress;
    
        public EmailMsgSender(List<String> emailAddress) {
            this.emailAddress = emailAddress;
        }
    
        @Override
        public void send(String message) {
            System.out.println("email send message " + message);
        }
    }

    //抽象化角色
    public abstract class Notification {

        protected MsgSender msgSender;
    
        public Notification(MsgSender msgSender) {
            this.msgSender = msgSender;
        }
    
        public abstract void notifyMessage(String message);
    }
    
    //扩展抽象化角色
    public class ServerNotification extends Notification{

        public ServerNotification(MsgSender msgSender) {
            super(msgSender);
        }
    
        @Override
        public void notifyMessage(String message) {
            msgSender.send(message);
        }
    }

    //扩展抽象化角色
    public class NormalNotification extends Notification{

        public NormalNotification(MsgSender msgSender) {
            super(msgSender);
        }
    
        @Override
        public void notifyMessage(String message) {
            msgSender.send(message);
        }
    }