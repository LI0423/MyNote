学习链接：https://pdai.tech/md/framework/tomcat/tomcat-overview.html

Tomcat主要由Container和Connector以及相关组件构成。
一、Tomcat架构
    Server：表示服务器，提供了一种优雅的方式来启动和停止整个系统，不必单独启动连接器和容器；包含多组服务，负责管理和启动各个service，
        同时监听8005端口发过来的shutdown命令，用于关闭整个容器。
    Service：tomcat封装的、对外提供完整的、基于组件的web服务，包含connectors、container两个核心组件，以及多个功能组件，各个service
        之间是独立的，但是共享同一jvm的资源。
    Connector：表示连接器，将service和container连接起来，首先需要注册到一个service，作用就是把来自客户端的请求转发到container，并
        将container处理的结果返回给外部。
    Container：表示容器，Catalina，servlet容器，内部由多层容器组成，用于管理servlet生命周期，调用servlet相关方法；引擎(Engine)、
        主机(Host)、上下文(Context)和Wraper均继承自Container接口。
        Engine：Servlet的顶层容器，包含一个或多个Host子容器。
        Host：虚拟主机，负责Web应用的部署和Context的创建。
        Context：Web应用上下文，包含多个Wrapper，负责Web配置的解析、管理所有的Web资源。
        Wrapper：最底层的容器，是对Servlet的封装，负责Servlet实例的创建、执行和销毁。
    Loader：封装了java classloader，用于container加载类文件；
    Realm：tomcat中web应用程序提供访问认证和角色管理的机制；
    Jmx：javaSE中定义技术规范，是一个为应用程序、设备、系统等植入管理功能的框架，通过JMX可以远程监控tomcat的运行状态。
    Jasper：tomcat的JSP解析引擎，用于将jsp转换成Java文件，并编译成class文件。
    Session：负责管理和创建Session，以及Session的持久化，支持Session的集群。
    Pipeline：在容器中充当管道的作用，管道中可以设置各种valve（阀门），请求和响应在经由管道中各个阀门处理，提供了一种灵活可配置的处理
        请求和响应机制。
二、Tomcat处理Http请求流程
    假设来自客户的请求为：http://localhost:8080/test/index.jsp
    Connector把请求交给它所在的Service的Engine来处理，并等待Engine的回应。
    Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host。
    Engine匹配到名为localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机）。
    localhost Host获得请求/test/index.jsp，匹配它所拥有的所有Context。
    Host匹配到路径为/test的Context（如果匹配不到也把该请求交给路径名为""的Context去处理）。
    path="/test"的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet。
    Context匹配到Url Pattern为 *.jsp 的servlet，对应于JspServlet类，构造HttpServletRequest对象和HttpServletResponse对象，
        作为参数调用JspServlet的doGet或doPost方法。
    Context把执行完了之后的HttpServletResponse对象返回给Host。
    Host把HttpServletResponse对象返回给Engine。
    Engine把HttpServletResponse对象返回给Connector。
    Connector把HttpServletResponse对象返回给客户browser。
三、Tomcat生命周期