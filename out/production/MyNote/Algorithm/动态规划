动态规划
动态规划应用于子问题重叠的情况，不同的子问题具有公共的子子问题（子问题的求解是递归进行的，将其划分为更小的子问题）。
动态规划对于每一个子子问题只求解一次，将其保存在一个表格里面，无需每次求解一个子子问题都重新计算。
应用场景：
    动态规划方法一般用来求解最优化问题，这类问题可以有很多可行解，每个解都有一个值，希望找到具有最优值的解，称这样
    的解为问题的一个最优解，而不是最优解，因为可能有多个解都达到最优值。
动态规划步骤：
    定义一个状态，这是一个最优解的结构特征。
    进行状态递推，得到递推公式。
    进行初始化。
    返回结果。

示例一：斐波那契数列
动规分析：
    状态：f(i)表示第i个斐波那契数列
    初始化：f(0)=0;
           f(1)=1;
           f(2)=1;
    状态递推：f(i)=f(i-1)+f(i-2)
    返回结果：f(n)
代码：
    class Solution{
        public int Fibonacci(int n){
            int[] dp = new int[n];
            dp[0] = 0;
            if(n<=0){
                return dp[0];
            }
            dp[1] = 1;
            if(n==1){
                return dp[1];
            }
            dp[2] = 1;
            for(int i = 0;i <= n;i++){
                dp[i] = dp[i-1] + dp[i-2];
            }
            return dp[n];
        }
    }

示例二：变态青蛙跳台阶
    一只青蛙一次可以跳上1级台阶，也可以跳上2级...也可以跳n级，求该青蛙跳上一个n级台阶总共有多少种跳法。
动规分析：
    状态：f(i)表示一共i阶台阶青蛙跳的方法
    状态递推：
        假设两步跳完：
            第一步跳1，2，...，n阶
            第二步跳f(i-1)，f(i-2)，...，f(0)
            f(i)=f(i-1)+f(i-2)+...f(0)
            f(i-1)=f(i-2)+f(i-3)+...+f(0)
            f(i)=2f(i-1);
    初始化：f(1)=1
    返回结果：f(n)
代码：
    class Solution{
        public int jumpFloorII(int num){
            if(num < 0){
                return 0;
            }
            int total = 1;
            for(int i = 0; i < num; i++){
                total = 2 * total;
            }
            return total;
        }
    }

示例三：矩形覆盖
    可以用2*1的小矩形横着或者竖着去覆盖更大的矩形，请问用n个2*1的小矩形无重叠的覆盖一个2*n的大矩形总共有多少种方法。
动态分析：
    状态：f(i)表示覆盖一个2*i的矩形的方法数
    状态递推：
        第一步竖着放一个f(i-1)
        第一步横着放一个f(i-2)
        f(i) = f(i-1)+f(i-2)
    初始化：f(0)=0
           f(1)=1
           f(2)=2
    返回结果：f(n)
代码：
    class Solution{
        public int rectCover(int num){
            if(num <= num){
                return 0;
            }
            if(num == 1){
                return 1;
            }
            if(num == 2){
                return 2;
            }
            int[] dp = new int[num+1];
            int[0] = 0;
            int[1] = 1;
            int[2] = 2;
            for(int i = 0;i <= num; i++){
                dp[i] = dp[i-1] + dp[i-2];
            }
            return dp[num];
        }
    }

示例四：最大连续数列和
    对于一个有正有负的整数数组，请找出总和最大的连续数列。给定一个int数组A和数组大小n，请返回最大的连续数列的和。
    数组：{6,-3,7,-15,1,22}
动规分析：
    状态：f(i)表示以array[i]结尾的连续子序列的最大和。
    状态递推：
        前1个元素构成的子序列 {6}
        前2个元素构成的子序列 {6,-3},{-3}
        前3个元素构成的子序列 {6,-3,7},{-3,7}{7}
        f(i)=f(i-1)+array[i]
        f(i)=max(f(i-1)+array[i],array[i])
    初始化：f(0)=array[0]
    返回结果：max(f(i),result)
代码：
    class Solution{
        public void getMaxSum(int[] nums,int n){
            if(nums.length <= 0){
                return 0
            }
            int[] dp = new int[nums.length];
            dp[0] = nums[0];
            for(int i = 1; i < nums.length;i++){
                dp[i] = Math.max(dp[i-1]+nums[i],nums[i]);
            }
            int result = nums[0];
            for(int i = 0; i < nums.length; i++){
                result = Math.max(dp[i],result);
            }
            return result;
        }
    }

示例五：01背包问题
    所有物品不可再分，要么整个装入背包，要么放弃，不允许出现“仅选择物品的1/3装入背包”的情况。
    商店中拥有5件商品，各自的重量和收益分别是：
        商品1：重量1斤，收益1元；
        商品2：重量2斤，收益6元；
        商品3：重量5斤，收益18元；
        商品4：重量6斤，收益22元；
        商品5：重量7斤，收益28元。
    所有商品不可再分，顾客要么整件购买商品要么放弃购买，背包只能装11斤商品，如何选择才能获得最大收益。
代码：
    class Solution{
        static int N = 5;   //商品的种类
        static int W = 11;  //背包的承重
        //动态规划算法解决01背包问题
        public static void knapsack01(int[][] result,int[] w, int[] v){
            //逐个遍历每个商品
            for(int i = 1; i <= N; i++){
                //求出从1到W各个承重对应的最大收益
                for(int j=1; j<=W; j++){
                    //如果背包承重小于商品总重量，则该商品无法放入背包，收益不变
                    if(j<w[i]){
                        result[i][j] = result[i-1][j];
                    }else{
                        //比较装入该商品和不装该商品，哪种情况获得的收益更大，记录最大收益值
                        result[i][j] = result[i-1][j] > (v[i] + result[i-1][j-w[i]]) ? result[i-1][j] : (v[i] + result[i-1] - w[i]);
                    }
                }
            }
        }
        //追溯选中的商品
        public static void select(int[][], int[] w,int[] v){
            int n = N;
            int bagw = W;
            //逐个商品进行判断
            while(n>0){
                //如果在指定承重下，该商品对应的收益和上一个商品对应的收益相同
                if(result[n][bagw] == result[n-1][bagw]){
                    n--;                   
                } else {
                    //输出被选用商品的重量和价值
                    System.out.print("(" + w[n] + "," + v[n] + ")");
                    //删除被选用商品的承重，以便继续遍历
                    bagw = bagw - w[n];
                    n--;
                }
            }
        }
        public static void main(String[] args){
            int[] w = {0,1,2,5,6,7};    //商品的重量
            int[] v = {0,1,6,18,22,28};     //商品的价值
            int[][] result = new int[N+1][W+1];
            knapsack01(result,w,v);
            System.out.println("背包可容纳重量为 "+W+"，最大收益为 "+result[N][W]);
            System.out.print("选择了");
            select(result, w, v);
        }
    }
    
示例六：杨辉三角
    状态方程：dp[i][j] = dp[i-1][j]+dp[i-1][j-1]
    常量值：dp[i][0]=1,dp[i][i]=1
代码：
    class Solution{
        public List<List<Integer>> generate(int rows){
            List<List<Integer>> result = new ArrayList<>();
            int[][] dp =new int[rows][rows];
            dp[0][0] = 1;
            result.add(new ArrayList<Integer>(){
                add(dp[0][0]);
            })
            if(rows == 1){
                return result;
            }
            for(int i = 1 ;i < rows; i++){
                List<Integer> num = new ArrayList<>();
                dp[i][0] = 1;
                num.add(dp[i][0]);
                for(int j = 1; j < i; j++){
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
                    num.add(dp[i][j]);
                }
                dp[i][i] = 1;
                num.add(dp[i][i]);
                result.add(num);
            }
            return result;
        }
    }
