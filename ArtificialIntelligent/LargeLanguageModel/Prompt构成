一、构成
1、角色：给AI定义一个最匹配任务的角色，比如：‘你是一位软件工程师’，‘你是一位小学老师’。
2、指示：对任务进行描述。
3、上下文：给出与任务相关的其他背景信息（尤其在多轮交互中）
4、例子：必要时给出举例，学术中称为one-shot learning, few-shot learning, in-context learning；实践证明其对输出正确性有很大帮助。
5、输入：任务的输入信息；在提示词中明确的标识出输入。
6、输出：输出的格式描述，以便后继模块自动解析模型的输出结果，比如JSON、XML。

二、实现
1、简单实现
    from openai import OpenAI
    from dotenv import load_dotenv, find_dotenv

    # 加载 .env 文件中定义的环境变量
    _ = load_dotenv(find_dotenv())

    # 初始化 OpenAI 客户端
    client = OpenAI()

    def get_completion(prompt, model='gpt'):
        messages = [{"role": "user", "content": prompt}]
        response = client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=0,
        )
        return response.choices[0].message.content
    
    # 任务描述
    instruction = """
    你的任务是识别用户对手机流量套餐产品的选择条件。
    每种流量套餐产品包含三个属性：名称，月费价格，月流量。
    根据用户输入，识别用户在上述三种属性上的倾向。
    """

    # 用户输入
    input_text = """
    办个100G的套餐。
    """

    # prompt模版。instruction 和 input_text 会被替换成上面的内容
    prompt = f"""
    {instruction}

    用户输入：
    {input_text}
    """

    # 调用大模型
    response = get_completion(prompt)
    print(response)

    # 输出格式
    output_format = """
    以 JSNO 格式输出
    """

    # 稍微调整下咒语，加入输出格式
    prompt = f"""
    {instruction}

    {output_format}

    用户输入：
    {input_text}
    """

    # 调用大模型
    response = get_completion(prompt)
    print(response)

    # 把输出格式定义的更精细
    # 任务描述增加了字段的英文标识符
    instruction = """
    你的任务是识别用户对手机流量套餐产品的选择条件。
    每种流量套餐产品包含三个属性：名称(name)，月费价格(price)，月流量(data)。
    根据用户输入，识别用户在上述三种属性上的倾向。
    """

    # 输出格式增加了各种定义、约束
    output_format = """
    以JSON格式输出。
    1. name字段的取值为string类型，取值必须为以下之一：经济套餐、畅游套餐、校园套餐、无限量套餐或null；

    2. price字段的取值为一个结构体或null，包含两个字段：
    (1) operator, string 类型，取值范围：'<='（小于等于），'>='（大于等于），'=='（等于）
    (2) value, int类型

    3.data字段的取值为一个结构体 或 null，包含两个字段：
    (1) operator, string类型，取值范围：'<='（小于等于），'>='（大于等于），'=='（等于）
    (2) value, int类型或string类型，string类型只能是'无上限'

    4. 用户的意图可以包含price或data排序，以sort字段标识，取值为一个结构体：
    (1) 结构体中以"ordering"="descend"表示按降序排序，以"value"字段存储待排序的字段。
    (2) 结构体中以"ordering"="ascend"表示按升序排序，以"value"字段存储待排序的字段。

    只输出包含用户提及的字段，不要猜测任何用户未直接提及的字段，不输出值为null的字段。
    """

    input_text="办个100G以上的套餐"
    input_text="我要无限量套餐"
    input_text="有没有便宜的套餐"

    prompt = f"""
    {instruction}

    {output_format}

    用户输入：
    {input_text}
    """

    response = get_completion(prompt)
    print(response)

    # 加入例子，让输出更稳定。
    examples = """
    便宜的套餐：{"sort":{"ordering"="ascend","value"="price"}}
    有没有不限流量的：{"data":{"operator":"==","value":"无上限"}}
    流量大的：{"sort":{"ordering"="descend","value"="data"}}
    100G以上流量的套餐最便宜的是哪个：{"sort":{"ordering"="ascend","value"}}
    月费不超过200的：{"price":{"operator":"==","value":200}}
    就要月费180那个套餐：{"price":{"operator":"==","value":180}}
    经济套餐：{"name":"经济套餐"}
    """
    input_text = "有没有便宜的套餐"
    # input_text = "有没有土豪套餐"
    # input_text = "办个200G的套餐"
    # input_text = "有没有流量大的套餐"
    # input_text = "200元以下，流量大的套餐有哪些"
    # input_text = "你说那个10G的套餐，叫啥名字"

    prompt = f"""
    {instruction}

    {output_format}

    例如：
    {examples}

    用户输入：
    {input_text}
    """

    response = get_completion(prompt)
    print(response)

    # prompt加入上下文
    instruction = """
    你的任务是识别用户对手机流量套餐产品的选择条件。
    每种流量套餐产品包含三个属性：名称(name)，月费价格(price)，月流量(data)。
    根据用户输入，识别用户在上述三种属性上的倾向。
    """

    # 输出格式增加了各种定义、约束
    output_format = """
    以JSON格式输出。
    1. name字段的取值为string类型，取值必须为以下之一：经济套餐、畅游套餐、校园套餐、无限量套餐或null；

    2. price字段的取值为一个结构体或null，包含两个字段：
    (1) operator, string 类型，取值范围：'<='（小于等于），'>='（大于等于），'=='（等于）
    (2) value, int类型

    3.data字段的取值为一个结构体 或 null，包含两个字段：
    (1) operator, string类型，取值范围：'<='（小于等于），'>='（大于等于），'=='（等于）
    (2) value, int类型或string类型，string类型只能是'无上限'

    4. 用户的意图可以包含price或data排序，以sort字段标识，取值为一个结构体：
    (1) 结构体中以"ordering"="descend"表示按降序排序，以"value"字段存储待排序的字段。
    (2) 结构体中以"ordering"="ascend"表示按升序排序，以"value"字段存储待排序的字段。

    只输出包含用户提及的字段，不要猜测任何用户未直接提及的字段，不输出值为null的字段。
    """

    # 多轮对话的例子
    examples = """
    客服：有什么可以帮助您
    用户：100G套餐有什么

    {"data":{"operator":">=","value":100}}

    客服：有什么可以帮助您
    用户：100G套餐有什么
    客服：我们现在有无限套餐，不限流量，月费300元
    用户：太贵了，有200元以内的不

    {"data":{"operator":">=","value":100}, "price":{"operator":"<=","value":200}}

    客服：有什么可以帮助您
    用户：便宜的套餐有什么
    客服：我们现在有经济套餐，每月50元，10G流量
    用户：100G以上的有什么

    {"data":{"operator":">=","value":100}, "sort":{"ordering"="ascend","value"="price"}}

    客服：有什么可以帮助您
    用户：100G以上的套餐有什么
    客服：我们现在有畅游套餐，流量100G，月费180元
    用户：流量最多的呢

    {"sort":{"ordering"="descend","value"="data"},"data":{"operator":">=","value":100}}
    """

    input_text="哪个便宜"
    # input_text="无限量哪个多少钱"
    # input_text="流量最大的多少钱"

    # 多轮对话上下文
    context = f"""
    客服：有什么可以帮您
    用户：有什么100G以上的套餐推荐
    客服：我们有畅游套餐和无限套餐，您有什么价格倾向吗
    用户：{input_text}
    """

    prompt = f"""
    {instruction}
    
    {output_format}

    {examples}

    {context}
    """

    response = get_completion(prompt)
    print(response)

2、实现对话策略和NLG
    import josn
    import copy

3、纯OpenAI实现助手
    import josn
    from openai import OpenAI
    from dotenv import load_dotenv, find_dotenv
    _ = load_dotenv(find_dotenv())

    def print_json(json_source):
        """把任意对象或数组用排版美观的JSON格式打印出来"""
        json_string = ""
        if (not isinstance(json_source, list)):
            json_source = josn.loads(json_source.model_dump_json())

        print(josn.dumps(
            json_source,
            indent=4,
            ensure_asii=False
        ))

    client = OpenAI()

    # 定义消息历史。先加入 system 消息，里面放入对话内容以外的prompt
    messages =[
        {
            "role": "system",
            "content": """
            你是一个手机流量套餐的客服代表，你叫小瓜。可以帮助用户选择最合适的流量套餐产品。可以选择的套餐包括：
            经济套餐，月费50元，10G流量；
            畅游套餐，月费180元，100G流量；
            无限套餐，月费300元，1000G流量；
            校园套餐，月费150元，200G流量，仅限在校生。
            """
        }
    ]

    def get_completion(prompt, model="gpt-3.5"):
        # 把用户输入加入消息历史
        message.append({"role": "user", "content": prompt})
        response = client.chat.completions.create(
            model=model,
            messages=message,
            temperature=0,
        )
        msg = response.choices[0].message.content

        # 把模型生成的回复加入消息历史。否则下次调用模型时，模型不知道上下文
        messages.append({"role":"assistant","content": msg})
        return msg

    get_completion("有没有土豪套餐？")
    get_completion("多少钱？")
    get_completion("给我办一个")
    print_json(messages)