Java多线程与并发

1.为什么需要多线程
 （1）CPU增加了缓存，用来均衡与内存的速度差异；//导致“可见性”问题
 （2）操作系统增加了进程、线程，以分时复用CPU，进而均衡CPU与I/O设备的速度差异；//导致“原子性”问题
 （3）编译程序优化指令执行次序，使缓存能够得到更加合理地利用。//导致“有序性”问题

2.并发三要素：
 （1）可见性：一个线程对共享变量的修改，另一个线程能够立刻看到。
 （2）原子性：一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
 （2）有序性：程序执行的顺序按照代码的先后顺序执行。

3.线程使用
 （1）实现Runnable接口
    public class MyThread implements Runnable{
        public void run(){
            //...
        }
    }

    public static void main(String[] args){
        MyThread thread = new MyThread();
        Thread run = new Thread(instance);
        run.start();
    }
 （2）实现Callable接口
    public class MyCallable implements Callable{
        public void call(){
            return 123;
        }
    }

    public static void main(String[] args){
        MyCallable mc = new MyCallable();
        FutureTask<Integer> ft = new FutureTask<>(mc);
        Thread thread = new Thread(ft);
        thread.start();
    }
 （3）继承Thread类
    public class MyThread extends Thread{
        public void run(){
            //...
        }
    }

    public static void main(String[] args){
        MyThread mt =new MyThread();
        mt.start();
    }

4.基础线程机制
 （1）Executor
    主要有三种Executor：
    CachedThreadPool：一个任务只创建一个线程；
    FixedThreadPool：所有任务只能使用固定大小的线程；
    SingleThreadExecutor：相当于大小为1的FixedThreadPool。

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newCachedThreadPool();
        for (int i = 0; i < 5; i++) {
            executorService.execute(new MyRunnable());
        }
        executorService.shutdown();
    }
    
5.synchronized详解
    Monitorenter和MonitorExit会让对象在执行使其锁计数器加一或者减一。每一个对象在同一时间只与一个Monitor相关联，一个monitor在同一时间只能被一个线程获取，
    一个对象在尝试获得与这个对象相关联的Monitor时，会发生三种情况之一：
    （1）monitor计数器为0时，就是目前还没有被获得，线程会立刻获得，然后计数器+1，别的线程想要获得时就要等待。
    （2）线程已经拿到这个锁的所有权，又重入这把锁，锁计数器就会累加，变为2，并随着累加的次数一直累加。
    （3）这把锁已经被别的线程获取了，等待锁释放。

    修饰实例方法：
        synchronized修饰实例方法，锁对象为当前实例对象，也称之为对象锁，进入同步代码需要获取当前实例对象的锁。进入同步实例方法时，
        如果锁对象不是同一实例对象，则不会形成资源竞争，线程之间互不影响。
        public class SynchronizedTest {
            public static void main(String[] args) {
                CustomService customService = new CustomService();
                new Thread(() -> customService.test1(), "ThreadA").start();
                new Thread(() -> customService.test2(), "ThreadB").start();
            }

            static class CustomService{
                @SneakyThrows
                public synchronized void test1() {
                    TimeUnit.SECONDS.sleep(1);
                    for(int i = 0; i < 5; i++) {
                        System.out.println(Thread.currentThread.getName() + " method:test1 :" + i);
                    }
                }
                @SneakyThrows
                public synchronized void test2() {
                    TimeUnit.SECONDS.sleep(1);
                    for(int i = 0; i < 5; i++) {
                        System.out.println(Thread.currentThread.getName() + " method:test2 :" + i);
                    }
                }
            }
        }
        虽然多个线程分别调用了不同的Synchronized修饰的实例方法，但是这些方法的锁对象是同一个，因此形成资源竞争，同一时刻只能有一个线程执行同步代码。

    修饰静态方法：
        synchronized修饰静态方法，锁对象为当前类的Class对象，也称之为类锁，进入同步代码前需要获取类的Class对象的锁。
        public class SynchronizedTest{
            @SneakyThrows
            public static void main(String[] args) {
                CustomService customService = new CustomService();
                new Thread(() -> customService.test1(), "ThreadA").start();
                TimeUnit.SECONDS.sleep(1);
                new Thread(() -> customService.test2(), "ThreadB").start();
            }

            static class CustomService{
                @SneakyThrows
                public static synchronized void test3(){
                    TimeUnit.SECONDS.sleep(2);
                    for (int i = 0; i < 5; i++){
                        System.out.println(Thread.currentThread().getName() + "method:test3 :" + i);
                    }
                }
                @SneakyThrows
                public static synchronized void test4(){
                    TimeUnit.SECONDS.sleep(2);
                    for (int i = 0; i < 5; i++){
                        System.out.println(Thread.currentThread().getName() + "method:test4 :" + i);
                    }
                }
            }
        }
        ThreadA先获得CustomService的Class对象锁，这是一个类锁（全局锁），而后ThreadB来获取CustomService的实例对象锁，虽然不是同一个锁对象，
        但是类锁是一个全局锁，因此形成资源竞争，同一时刻只能有一个线程执行同步代码。

    修饰代码块：
        synchronized修饰代码块，取决于锁对象，对给定对象加锁，进入同步代码则需要获取给定对象的锁。
        public void test5(){
            // 修饰代码块，锁对象为实例对象
            synchronized (this) {
            }
        }
        public void test6(){
            // 修饰代码块，锁对象为实例对象
            synchronized(new Object()){
            }
        }
        public void test7(){
            // 修饰代码块，锁对象为类的class对象
            synchronized(Object.class){
            }
        }
    5.1 偏向锁
        在没有线程竞争的情况下，线程A去访问Synchronized修饰的方法/代码块，尝试通过偏向锁来获取锁资源（基于CAS），如果获取锁资源成功，则修改MarkWord中的锁标记，
        偏向锁标记为1，锁标记为01，并存储获得锁资源的线程ID，然后执行代码。如果同一线程再来访问，直接获取锁资源，然后执行代码。
    5.2 轻量级锁
        轻量级锁就是未获取到锁资源的线程，进行一定次数的自旋，重新尝试获取锁，如果在重试过程中获取到锁资源，那么此线程就不需要阻塞。线程A已获取偏向锁，线程B开始竞争
        锁资源，锁对象的线程id与线程B的线程id不一致，意味着出现锁竞争，在线程B的栈帧中创建锁记录Lock Record，用于存储锁对象的Mark Word旧信息以及锁对象地址，
        并将Mark Word中的信息，例如对象哈希值，GC分代年龄拷贝到Lock Record中的Displaced Mark Word中，以便后续释放锁时使用，自旋尝试将Mark Word中锁指针记录
        更新为线程B栈帧中Lock Record的地址。如果更新成功，则修改Mark Word中锁标记修改为00，偏向锁标记为0，并将Lock Record的owner指针指向当前锁对象。
        自旋重试过程中，会一直占用CPU资源，如果持有锁的线程占用锁资源的时间比较短，自旋会明显地提升性能，如果持有锁的线程占用锁资源的时间比较长，那么自旋就会浪费CPU资源，
        因此需要限制线程自旋的次数。
    5.3 重量级锁
        如果持有锁的线程占用锁资源的时间较长，自旋一定次数仍未获取锁资源的线程会占用很多的CPU资源，解决办法就是让线程阻塞等待，最终轻量级锁升级为重量级锁。
    5.4 锁升级过程
        无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁。
        升级不一定是一级一级升，可以直接由无锁状态升级为轻量级锁。

6.JVM锁的优化
    （1）锁粗化：减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁扩展成一个范围更大的锁。
    （2）锁消除：通过运行时JIT编译器的逃逸分析来消除一些没有在当前同步块以外被其他线程贡献的数据的锁的保护，通过逃逸分析也可以在线程本地Stack上进行对象空间的
    分配（同时减少Heap上的垃圾收集开销）。意思就是JVM会判断在一段程序中的同步明显不会逃逸出去从而被其他线程访问到，那JVM会把他们当作栈上数据对待，认为这些数据
    是线程独有的，不需要加同步。
    （3）轻量级锁：
    （4）偏向锁：为了在无锁竞争的情况下避免在锁获取过程中执行不必要的CAS原子指令。
            当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作了加锁和解锁，只需要测
        试下对象头的Mark Word里是否存储着指向当前线程的偏向锁。偏向锁使用了一种等待竞争才会释放锁的机制，当其他线程尝试获取偏向锁时，持有偏向锁的线程才会释放锁。
        偏向锁的撤销需要等到全局安全点（当前线程没有正在执行的字节码）。首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否还活着，如果线程处于不活动状态，直接
        将对象头设置为无锁状态，如果还活着，JVM会遍历栈帧中的锁记录，栈帧中的锁记录和对象头要么偏向于其他线程，要么恢复到无锁状态或者标记对象不适合作为偏向锁。
    （5）适应性自旋锁：当线程在获取轻量级锁的过程中执行CAS操作失败时，在进入与monitor相关联的操作系统重量级锁前会进入忙等，然后再次尝试，当尝试一定的次数后如果仍然
    没有成功与该monitor关联的semaphore（互斥锁）进入到阻塞状态。
            如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。比如增加到
        100次循环。相反，如果对于某个锁，自旋很少成功获取锁。那再以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。

7.Thread.sleep()和Object.wait()的区别 
    Thread.sleep()不会释放占有的锁，Object.wait()会释放占有的锁；
    Thread.sleep()必须传入时间，Object.wait()可传可不传，不传表示一直阻塞下去； 
    Thread.sleep()到时间了会自动唤醒，然后继续执行； 
    Object.wait()不带时间的，需要另一个线程使用Object.notify()唤醒； 
    Object.wait()带时间的，假如没有被notify，到时间了会自动唤醒，这时又分好两种情况，一是立即获取到了锁，线程自然会继续执行；二是没有立即获取锁，线程进入同步队列等待获取锁； 
    其实，他们俩最大的区别就是Thread.sleep()不会释放锁资源，Object.wait()会释放锁资源。

8.Thread.sleep()和LockSupport.park()的区别 
    LockSupport.park()还有几个兄弟方法——parkNanos()、parkUtil()等，我们这里说的park()方法统称这一类方法。 
    从功能上来说，Thread.sleep()和LockSupport.park()方法类似，都是阻塞当前线程的执行，且都不会释放当前线程占有的锁资源； 
    Thread.sleep()没法从外部唤醒，只能自己醒过来； 
    LockSupport.park()方法可以被另一个线程调用LockSupport.unpark()方法唤醒； 
    Thread.sleep()方法声明上抛出了InterruptedException中断异常，所以调用者需要捕获这个异常或者再抛出； 
    LockSupport.park()方法不需要捕获中断异常； 
    Thread.sleep()本身就是一个native方法； 
    LockSupport.park()底层是调用的Unsafe的native方法；

9.Object.wait()和LockSupport.park()的区别 
    Object.wait()方法需要在synchronized块中执行； 
    LockSupport.park()可以在任意地方执行； 
    Object.wait()方法声明抛出了中断异常，调用者需要捕获或者再抛出； 
    LockSupport.park()不需要捕获中断异常； 
    Object.wait()不带超时的，需要另一个线程执行notify()来唤醒，但不一定继续执行后续内容； 
    LockSupport.park()不带超时的，需要另一个线程执行unpark()来唤醒，一定会继续执行后续内容； 
    如果在wait()之前执行了notify()会怎样? 抛出IllegalMonitorStateException异常； 
    如果在park()之前执行了unpark()会怎样? 线程不会被阻塞，直接跳过park()，继续执行后续内容；

10.ThreadLocal如何实现线程隔离
    主要是用到了Thread对象中的一个ThreadLocalMap类型的变量threadLocals，负责存储当前线程的关于Connection的对象，ConnectionLocal这个变量为key，以新建的Connection
    对象为value，线程第一次读取的时候如果不存在就会调用ThreadLocal的initialValue方法创建一个Connection对象并且返回。
    首先获取当前线程对象，然后从线程对象中获取到ThreadLocalMap的成员属性threadLocals。如果当前线程的threadLocals已经初始化（即不为null）并且存在以当前ThreadLocal对象
    为key的值，则直接返回当前线程要获取的对象。如果当前线程的threadLocals已经初始化（即不为null）但是不存在以当前ThreadLocal对象为key的对象，重新创建一个对象，并添加到当前
    线程threadLocals中并返回。如果当前线程的threadLocals属性还没有被初始化，则重新创建一个ThreadLocalMap对象，并且创建一个对象并添加到ThreadLocalMap对象中并返回。

11.ThreadLocal造成内存泄露的问题
    用线程池来操作ThreadLocal对象确实会造成内存泄露，因为对于线程池里面不会销毁的线程，里面总会存在着<ThreadLocal,LocalVariable> 的强引用，因为final static修饰ThreadLocal
    并不会释放，而ThreadLocalMap对于key虽然是弱引用，但是强引用不会释放，弱引用当然也会一直有值，同时创建的LocalVariable对象也不会释放，就造成了内存泄露；如果LocalVariable
    对象不是一个大对象的话，其实泄露的并不严重，泄露的内存=核心线程数*LocalVariable对象的大小。

12.手写死锁
    public class DeadLock {
        public static void main(String[] args){
            Resouece res1 = new Resouece();
            Resouece res2 = new Resouece();

            res1.flag= true;
            res2.flag = false;

            new Thread(new Runnable(){
                @Override
                public void run(){
                    res1.method();
                }
            },"A").start();

            new Thread(new Runnable(){
                @Override
                public void run(){
                    res2.method();
                }
            },"B").start();
        }
    }

    public class Resouece{
        boolean flag = true;
        private static final Object obj1 = new Object();
        private static final Object obj2 = new Object();

        public void method(){
            if(flag){
                synchronized(obj1){
                    System.out.println(Thread.currentThread().getName() + " " + "获取到锁1");
                    try{
                        Thread.sleep(50);
                    } catch (InterruptedException e){
                        e.printStackTrace();
                    }
                    synchronized(obj2){
                        System.out.println(Thread.currentThread.getName() + " " + "获取到锁2");
                        synchronized(obj1){
                            System.out.println(Thread.currentThread().getName() + " " + "获取到锁1");
                        }
                    }
                }
            }else{
                synchronized(obj2){
                    System.out.println(Thread.currentThread.getName() + " " + "获取到锁2");
                    synchronized(obj1){
                        System.out.println(Thread.currentThread().getName() + " " + "获取到锁1");
                    }
                }
            }
        }
    }

13.如何避免死锁
（1）打破互斥条件：改造独占性资源为虚拟资源，大部分资源已无法改造。
（2）打破不可抢占条件：当一进程占有一独占性资源后又申请一独占性资源无法满足，则退出原占有的资源。
（3）打破占有且申请条件：采用资源预先分配策略，即进程运行前申请全部资源，满足则运行，不然就等待。
（4）打破循环等待条件：实现资源有序分配策略，对所有设备实现分类编号，所有进程只能采用按序号递增的形式申请资源。

14.CountDownLatch
    CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后再继续执行。相当于是一个计数器，计数器的初始值就是线程的数量，每当一个任务完成后，计数器的值就减1，
    当计数器的值为0时，表示所有的线程都完成了任务。在CountDownLatch上await的线程就会被唤醒，继续执行其他任务，也可以延迟唤醒，给CountDownLatch加一个延迟时间就可以。
（1）使用方法
    CountDownLatch提供了一个构造方法，必须指定初始值，还制定了countDown方法，这个方法的主要作用是用来减小计数器的值，当计数器为0时，在CountDownLatch上await的线程
    就会被唤醒。

    public class TCountDownLatch {
        public static void main(String[] args){
            CountDownLatch latch = new CountDownLatch(5);
            Increment increment = new Increment(latch);
            Decrement decrement = new Decrement(latch);

            new Thread(increment).start();
            new Thread(increment).start();

            try{
                Thread.sleep(6000);
            } catch(InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    class Decrement implements Runnable{
        CountDownLatch countDownLatch;

        public Decrement(CountDownLatch countDownLatch){
            this.countDownLatch = countDownLatch;
        }

        @Override
        public void run(){
            try{
                for(int i = countDownLatch.getCount();i>0;i--){
                    Thread.sleep(1000);
                    System.out.println("countDown");
                    this.countDownLatch.countDown();
                }
            } catch(InterruptedException e){
                e.printStackTrace();
            }
        }
    }

    class Increment implements Runnable{
        CountDownLatch countDownLatch;

        public Decrement(CountDownLatch countDownLatch){
            this.countDownLatch = countDownLatch;
        }

        @Override
        public void run(){
            try{
                System.out.println("await");
                countDownLatch.await();
            } catch(InterruptedException e){
                e.printStackTrace();
            }
            System.out.println("Waiter Released");
        }
    }

（2）源码分析
    CountDownLatch的底层是由AQS支持的，AQS核心数据结构是两个队列，一个是同步队列（sync queue），一个是条件队列（condition queue）。

15.线程池
（1）线程池的三种类型
    newFixedThreadPool：线程池中的线程数量达到corePoolSize，即使当前没有可执行任务，也不会释放空闲线程。由于使用的无界阻塞队列LinkedBlockingQueue，线程池里的数量不超过
        corePoolSize时，MaximumPoolSize和KeepAliveTime就会是个无用参数。由于是无界队列，那么饱和策略就会失效。
    newSingleThreadPool：初始化的线程池中只有一个线程，由于使用的是无界队列，则饱和策略就会失效。如果该线程因为异常失效，那么就会重新创建一个线程，单个线程保证了提交的任务顺序执行。
    newCachedThreadPool：内部使用SynchronousQueue作为阻塞队列，与newFixedThreadPool不同的是，当线程空闲时间超过keepAliveTime时会释放空闲的线程，提交任务没有空闲线程时则会
        自动创建，会给程序带来一定的开销。
（2）线程池重要参数
    corePoolSize：线程池中的核心任务数，当提交一个任务，线程池就会创建一个任务，直到线程池中的线程数量达到corePoolSize，即使线程池中有空闲线程也会去创建新的线程。
        一般设置为cpu核数：cpuNum = Runtime.getRuntime().avaliableProcessors();
        IO密集型任务：对IO占用高，对CPU的需求较少，最大线程数可以多开点，这样可以更充分地利用CPU资源，tomcat的默认线程数就是200.核心线程数=CPU核数/（1-阻塞系数）或CPU核数*2。
        计算密集型任务：对CPU需求较高，最大线程数就不需要开太多，CPU核心数就那么多，开太多反而会增加线程上下文切换的时间。核心线程数=CPU核数+1或为CPU核数*2.
    maximumPoolSize：线程中允许的最大线程数，当阻塞队列满了，且有任务继续提交时就会继续创建线程，前提是线程池中的线程数小于maximumPoolSize。如果是无限阻塞队列maximumPoolSize
        就会失效，提交的任务会不断的被放入队列中。一般设置为cpu核数的两倍。
    workQueue：用来保存等待被执行的任务的阻塞队列。
        ArrayBlockingQueue：基于数组结构的有界阻塞队列，按FIFO排序任务。
        LinkedBlockingQueue：基于链表结构的阻塞队列，按FIFO排序任务，吞吐量要高于ArrayBlockingQueue。
        SynchronousQueue：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程移除，否则一直处于阻塞状态，吞吐量要高于LinkedBlockingQueue。
        PriorityBlockingQueue：具有优先级别的无界阻塞队列。
            LinkedBlockingQueue比ArrayBlockingQueue在插入方面性能更优，但是两者在put()和take()操作时都需要加锁，SynchronousQueue根据任务的状态判断执行，不需要加锁。
    keepAliveTime：线程空闲时的存活时间，默认情况下，这个参数在线程数大于corePoolSize的情况下才会生效，超过这个时间的空闲线程将会被终止。
    unit：keepAliveTime的单位。
    threadFactory：自定义的线程仓库，可以给生成的线程设置一个具有识别度的线程名，默认为DefaultThreadFactory。
    Handler：线程池的饱和策略，当阻塞队列满了且没有空闲线程，必须采用一种饱和策略处理该任务。
        Abortpolicy：直接抛出异常，默认策略。
        CallerRunsPolicy：用线程调用者来执行这个任务。
        DiscardOldestPolicy：丢弃阻塞队列中最靠前的任务，并执行当前任务。
        DiscardPolicy：直接丢弃任务。
（3）线程池任务的提交
    submit任务，等待线程池execute；执行FutureTask类的get方法时，会把主线程封装成WaitNode节点并保存在waiters链表中，并阻塞等待运行结果；FutureTask任务执行完成后，通过UNSAFE设置
    相应的waitNode为NULL，并通过LockSupport类unpark方法唤醒主线程。
（4）线程池任务的执行
    线程池的工作线程通过Worker类来实现，在ReentrantLock的锁的保证下，将worker实例加入hashset，并启动Worker中的线程。线程工厂在创建线程thread时，将Woker实例本身this作为参数传入，
    当执行start方法启动线程thread时，本质是执行了Worker的runWorker方法。firstTask执行完成之后，通过getTask方法从阻塞队列中获取等待的任务，如果队列中没有任务，getTask方法会被阻塞
    并挂起，不会占用cpu资源。
（5）关闭线程池
    遍历线程池中的所有线程，然后逐个调用线程的interrupt()方法。
    shutdown：将线程池中的线程状态设置为SHUTDOWN，然后关闭所有没有在执行任务的线程。
    shutdownnow：将线程的状态设置为STOP，然后停止所有正在执行或者暂停执行任务的线程，只要调用这两个关闭方法中的任意一个，isShutDown()返回true。当所有任务都成功关闭了，
        isTerminated()返回true。

    @Configuration
    public class ThreadPoolConfig{
        public static String THREAD_NAME = "thread-pool-%d";
        public static final int CORE_POOL_SIZE = Runtime.getRuntime().avaliableProcessors * 2 + 1;
        public static final int MAXIMUM_POOL_SIZE = Runtime.getRuntime.avaliableProcessors * 2;

        @bean
        public ExecutorService threadPool() {
            ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(THREAD_NAME).build();
            return new ThreadPoolExecutor(
                CORE_POOL_SIZE,
                MAXIMUM_POOL_SIZE,
                0L,
                TimeUnit.SECONDS,
                new MemorySafeLinkedBlockingQueue<>();
                threadFactory,
                new ThreadPoolExecutor.CallerRunsPolicy()
            );
        }

    }