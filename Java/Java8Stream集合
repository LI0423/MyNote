
//案例使用的员工类
List<Person> personList = new ArrayList<Person>();
personList.add(new Person("Tom", 8900, "male", "New York"));
personList.add(new Person("Jack", 7000, "male", "Washington"));
personList.add(new Person("Lily", 7800, "female", "Washington"));
personList.add(new Person("Anni", 8200, "female", "New York"));
personList.add(new Person("Owen", 9500, "male", "New York"));
personList.add(new Person("Alisa", 7900, "female", "New York"));

@Data
class Person {
  private String name; // 姓名
  private int salary; // 薪资
  private int age; // 年龄
  private String sex; //性别
  private String area; // 地区

  // 构造方法
  public Person(String name, int salary, int age,String sex,String area) {
    this.name = name;
    this.salary = salary;
    this.age = age;
    this.sex = sex;
    this.area = area;
  }
}

1.遍历、匹配(forEach/find/match)
    List<Integer> list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);
    // 遍历输出符合条件的元素
    list.stream().filter(x -> x > 6).forEach(System.out::println);
    // 匹配第一个
    Optional<Integer> findFirst = list.stream().filter(x -> x > 6).findFirst();
    // 匹配任意（适用于并行流）
    Optional<Integer> findAny = list.parallelStream().filter(x -> x > 6).findAny();
    // 是否包含符合特定条件的元素
    boolean anyMatch = list.stream().anyMatch(x -> x < 6);

2.筛选(filter)
    //筛选工资高于8000的人并形成新的集合。
    List<String> filterList = personList.stream.filter(x -> x.getSalary()>8000).map(Person::getName).collect(Collectors.toList());

3.聚合(max/min/count)
    //获取集合中最长的元素
    List<String> list = Arrays.asList("adnm", "admmt", "pot", "xbangd", "weoujgsd");
    Optional<String> max = list.stream().max(Comparator.comparing(String::length));

4.映射(map/flatMap)
    //整数数组每个元素+3
    List<Integer> intList = Arrays.asList(1,3,5,7,9,11);
    List<Integer> intListNew = intList.stream.map(x -> x + 3).collect(Collectors.toList);
    
    //将两个字符数组合并成一个新的字符数组
    List<String> list = Arrays.asList("m,k,l,a","1,3,5,7");
    List<String> listNew = list.stream.flatMap(s -> {
        //将每个元素转换成一个stream
        String[] split = s.split(",");
        Stream<String> s2 = Arrays.stream(split);
        return s2;
    }).collect(Collectors.toList);

5.归约(reduce)
    //求Integer集合的元素之和、乘积和最大值
    List<Integer> list = Arrays.asList(1, 3, 2, 8, 11, 4);
    // 求和方式1
    Optional<Integer> sum = list.stream().reduce((x, y) -> x + y);
    // 求和方式2
    Optional<Integer> sum2 = list.stream().reduce(Integer::sum);
    // 求和方式3
    Integer sum3 = list.stream().reduce(0, Integer::sum);
    // 求乘积
    Optional<Integer> product = list.stream().reduce((x, y) -> x * y);
    // 求最大值方式1
    Optional<Integer> max = list.stream().reduce((x, y) -> x > y ? x : y);
    // 求最大值写法2
    Integer max2 = list.stream().reduce(1, Integer::max);
    // 求最小值
    Optional<SportItemScore> min = itemScores.stream().min(Comparator.comparing(SportItemScore::getTotalScore));


    //求员工的工资之和和最高工资
    // 求工资之和方式1：
    Optional<Integer> sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);
    // 求工资之和方式2：
    Integer sumSalary2 = personList.stream().reduce(0, (sum, p) -> sum += p.getSalary(),
        (sum1, sum2) -> sum1 + sum2);
    // 求工资之和方式3：
    Integer sumSalary3 = personList.stream().reduce(0, (sum, p) -> sum += p.getSalary(), Integer::sum);

    // 求最高工资方式1：
    Integer maxSalary = personList.stream().reduce(0, (max, p) -> max > p.getSalary() ? max : p.getSalary(),
        Integer::max);
    // 求最高工资方式2：
    Integer maxSalary2 = personList.stream().reduce(0, (max, p) -> max > p.getSalary() ? max : p.getSalary(),
        (max1, max2) -> max1 > max2 ? max1 : max2);

6.归集(toList/toSet/toMap)
    List<Integer> list = Arrays.asList(1, 6, 3, 4, 6, 7, 9, 6, 20);
    List<Integer> listNew = list.stream().filter(x -> x % 2 == 0).collect(Collectors.toList());
    Set<Integer> set = list.stream().filter(x -> x % 2 == 0).collect(Collectors.toSet());
    Map<?, Person> map = personList.stream().filter(p -> p.getSalary() > 8000)
        .collect(Collectors.toMap(Person::getName, p -> p));

7.统计(count/averaging)
    //统计员工人数、平均工资、工资总额、最高工资
    // 求总数
    Long count = personList.stream().collect(Collectors.counting());
    // 求平均工资
    Double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));
    // 求最高工资
    Optional<Integer> max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));
    // 求工资之和
    Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));
    // 一次性统计所有信息
    DoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));

8.分组(partitioningBy/groupingBy)
    //将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组
    // 将员工按薪资是否高于8000分组
    Map<Boolean, List<Person>> part = personList.stream().collect(Collectors.partitioningBy(x -> x.getSalary() > 8000));
    // 将员工按性别分组
    Map<String, List<Person>> group = personList.stream().collect(Collectors.groupingBy(Person::getSex));
    // 将员工先按性别分组，再按地区分组
    Map<String, Map<String, List<Person>>> group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));
    allGradeClassList.stream().collect(Collectors.groupingBy(GradeClassSearchInfoDTO::getCampusId, TreeMap::new, Collectors.groupingBy(GradeClassSearchInfoDTO::getGrade, TreeMap::new, Collectors.toList())));

9.接合(joining)
    String names = personList.stream().map(p -> p.getName()).collect(Collectors.joining(","));

10.归约(reducing)
    // 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）
    Integer sum = personList.stream().collect(Collectors.reducing(0, Person::getSalary, (i, j) -> (i + j - 5000)));

11.排序(sorted)
    //将员工按工资由高到低（工资一样则按年龄由大到小）排序
    // 按工资升序排序（自然排序）
    List<String> newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)
        .collect(Collectors.toList());
    // 按工资倒序排序
    List<String> newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())
        .map(Person::getName).collect(Collectors.toList());
    // 先按工资再按年龄升序排序
    List<String> newList3 = personList.stream()
        .sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)
        .collect(Collectors.toList());
    // 先按工资再按年龄自定义排序（降序）
    List<String> newList4 = personList.stream().sorted((p1, p2) -> {
      if (p1.getSalary() == p2.getSalary()) {
        return p2.getAge() - p1.getAge();
      } else {
        return p2.getSalary() - p1.getSalary();
      }
    }).map(Person::getName).collect(Collectors.toList());

12.提取/组合
    String[] arr1 = { "a", "b", "c", "d" };
    String[] arr2 = { "d", "e", "f", "g" };

    Stream<String> stream1 = Stream.of(arr1);
    Stream<String> stream2 = Stream.of(arr2);
    // concat:合并两个流 distinct：去重
    List<String> newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());
    // limit：限制从流中获得前n个数据
    List<Integer> collect = Stream.iterate(1, x -> x + 2).limit(10).collect(Collectors.toList());
    // skip：跳过前n个数据
    List<Integer> collect2 = Stream.iterate(1, x -> x + 2).skip(1).limit(5).collect(Collectors.toList());

13.复杂场景应用
    LinkedHashMap<String, List<String>> collect = currentCyclePrescriptionXZB.stream()
    .collect(
        Collectors.groupingBy(
            data -> data.getCampusId() + DictionaryData.SPLIT + data.getCampusName(),
            LinkedHashMap::new,
            Collectors.collectingAndThen(
                Collectors.mapping(
                    data -> data.getSectionId() + DictionaryData.SPLIT + data.getNj() + DictionaryData.SPLIT + data.getSectionName() + data.getNj() + "年级" + DictionaryData.SPLIT + data.getGrade(),
                    Collectors.toCollection(() -> new TreeSet<>()) // 使用 TreeSet 去重
            ),
            ArrayList::new // 返回List
        )
    ));

14.并行流
    list.parallelStream.forEach(s -> {});