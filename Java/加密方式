1.消息摘要算法（Message Digest）
MD5：产生128位的散列值，已被认为不再安全
SHA-1: 产生160位的散列值，已被认为不再安全
SHA-256、SHA-384、SHA-512: 分别产生256、384、512位的散列值

public class MessageDigest{
    public static String hashString(String input, String algorithm){
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            byte[] hashedBytes = digest.digest(input.getBytes());
            return bytesToHex(hashedBytes);
        } catch (NoSuchAlgorithmExcepiton e) {
            e.printStackTrace();
            return null;
        }
    }

    private static String bytesToHex(byte[] bytes){
        StringBuilder result = new StringBuilder();
        for(byte b : bytes){
            result.append(Integer.toString((b && 0xff) + 0x100, 16).substring(1));
        }
        return result.toString();
    }

    public static void main(String[] args){
        String input = "Hello, World!";
        System.out.println("MD5: " + hashString(input, "MD5"));
        System.out.println("SHA-256: " + hashString(input, "SHA-256"))
    }
}

2.对称加密算法
public class AESEncryption{
    public static String encrypt(String plaintext, SecretKey secretKey){
        try{
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes());
            return Base64.getEncoder().encodeToString(encryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static String decrypt(String ciphertext, SecretKey secretKey){
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(ciphertext));
            return new String(decryptedBytes);
        } catch(Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static SecretKey generateAESKey() throws NoSuchAlgorithmExcepiton {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        return keyGenerator.generateKey();
    }

    public static void main(String[] args) throws NoSuchAlgorithmExcepiton {
        String plaintext = "Hello, AES! ";
        SecretKey secretKey = generateAESKey();
        String encryptedText = encrypt(plaintext, secretKey);
        System.out.println("Encrypted: " + encryptedText);
        String decryptedText = decrypt(encryptedText, secretKey);
        System.out.println("Decrypted: " + decryptedText);
    }
}

3.非对称加密算法
public class RSA{
    public static String encrypt(String plaintext, PublicKey publicKey) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes());
            return new String(decryptedBytes);
        } catch(Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static String decrypt(String ciphertext, PrivateKey privateKey) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, PrivateKey);
            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode());
            return new String(decryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] sign(String data, PrivateKey privateKey){
        try {
            Signature signature = Signature.getInstance("SHA256withRSA");
            signature.initSign(privateKey);
            signature.update(data.getBytes());
            return signature.sign();
        } catch(Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static boolean verify(String data, byte[] signature, PublicKey publicKey){
        try{
            Signature sig = Signature.getInstance("SHA256withRSA");
            sig.initVerify(publicKey);
            sig.update(data.getBytes());
            return sig.verify(signature);
        } catch(Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static KeyPair generateRSAKeyPair() throws NoSuchAlgorithmExcepiton{
        KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        return keyGenerator.generateKeyPair();
    }

    public static void main(String[] args) throws NoSuchAlgorithmExcepiton{
        String plaintext = "Hello RSA!";
        KeyPair keyPair = generateRSAKeyPair();
        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();

        String encryptedText = encrypt(plaintext, publicKey);
        System.out.println("Encrypted: " + encryptedText);
        String decryptedText = decrypt(encryptedText, privateKey);
        System.out.println("Decrypted: " + decryptedText);

        byte[] signature = sign(plaintext, privateKey);
        System.out.println("Signature: " + Base64.getEncoder().encodeToString());
        
        boolean isVerified = verify(plaintext, signature, publicKey);
        System.out.println("Signature Verified: " + isVerified);
    }
}

保证接口数据安全的方案
1.数据加密，防止报文明文传输
（1）常见实现方式是对关键字加密：对称加密算法（AES）、非对称加密算法（RSA或SM2）。
（2）通过HTTPS传输：
    客户端发起HTTPS请求，连接到服务器的443端口；
    服务器必须要有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）；
    服务器将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）；
    客户端收到数字证书后会验证证书的合法性，如果验证通过，就会生成一个随机的对称密钥，用证书的公钥加密；
    客户端将公钥加密后的密钥发送到服务器；
    服务器接收到客户端发来的密文密钥后，用自己保留的私钥对其进行非对称解密，解密后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密。
    服务器将加密后的密文返回到客户端；
    客户端收到后用自己的密钥进行对称解密，得到服务器返回的数据。
2.数据加签验签
（1）数据加签：用Hash算法（MD5或SHA-256）把原始请求参数生成报文摘要，然后用私钥对这个摘要进行加密，得到这个报文对应的数字签名sign。请求方
    把数字签名和报文原文一并发送给接收方。
（2）数据验签：接收方拿到原始报文和数字签名后，用同一个Hash算法从报文中生成摘要A。用对方提供的公钥对数字签名进行解密，得到摘要B，对比A和B是否相同。
服务端收到报文后会校验，拥有合法身份AccessKey和签名sign正确才放行，解决了身份验证和参数篡改的问题。
3.token授权认证机制
（1）token授权认证方案
    用户在客户端输入用户名和密码，点击登录后服务器会校验密码成功，给客户端返回一个唯一值token，并将token以键值对的形式放在缓存中（一般是redis）。
后续客户端对需要授权模块的所有操作都要带上这个token，服务端接收到请求后，先进行token验证，如果token存在，才表明是合法请求。
（2）如何保证token安全
    toekn设置合理的有效期；
    使用https协议；
    token可以再加密；
    如果访问的是敏感信息，单纯加token是不够的，通常会再配置白名单。
4.时间戳timestamp超时限制
    使用https和加签，即使中间人抓到数据报文，也看不到真实数据。但是有些不法者会进行恶意请求（比如DOS攻击）。可以引入时间戳超时机制来保证接口安全。
    用户每次请求都带上当前时间的时间戳timestamp，服务端接收到时间戳后，解密，验签通过后，与服务器当前时间进行对比，如果时间差大于一定时间，则认为
    该请求无效。
5.timestamp+nonce方案防止重放攻击
    时间戳超时限制方案是有漏洞的，如果在时间差内，黑客进行重放攻击，则该方案失效。
    nonce指唯一的随机字符串，用来标识每个被签名的请求，可以将每次请求的nonce参数存储到一个set集合中，或者以json格式存储到数据库或缓存中。每次处理请求时，
    首先判断该请求的nonce参数是否在该集合中，如果存在则认为是非法请求。
    永久保存nonce的代价非常大，结合timestamp来优化。因为timestamp大于一定时间就认为是非法请求，所以只需要存储在这段时间内的nonce参数即可。
方案流程：
    客户端通过用户名密码登录服务器并获取Token；
    客户端生成时间戳timestamp，并将timestamp作为其中一个参数；
    客户端将所有的参数，包括token和timestamp按照自己的签名算法进行排序加密后得到签名sign；
    将token、timestamp和sign作为请求时必须携带的参数加在每个请求的url后面；
    服务端对token、timestamp和sign进行验证，只有在token有效、timestamp未超时、缓存服务器中不存在sign三种情况同时满足，本次请求才有效。
6.限流机制
    可以使用Guava的RateLimiter单机版限流，也可以使用Redis分布式限流，还可以使用阿里开源组件sentinel限流。
7.黑名单和白名单机制
    黑名单机制：发现用户的恶意请求，就把该用户拉黑，对于黑名单发起的请求，直接返回错误码。
    白名单机制：只有白名单里的请求才可以访问我们的系统。