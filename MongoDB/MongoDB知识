一、什么是MongoDB
    MongoDB是面向文档的NoSQL数据库，用于大量数据存储。
    MongoDB使用BSON这种结构来存储数据和网络数据交换

非关系型数据库特点：
    易扩展：数据之间无关系，非常容易扩展。
    大数据量，高性能：NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。得益于它的无关性，数据库的结构简单。一般MySQL使用Query Cache。NoSQL的Cache是记录级，
        是一种细粒度的Cache，
    灵活的数据模型：NoSQL无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式，而在关系数据库里，增删字段是一件非常麻烦的事情。
    高可用：NoSQL在不太影响性能的情况，就可以方便地实现高可用的架构。比如Cassandra、HBase模型。
与关系型数据库的比较
    查询速度：NoSQL将数据存储在高速缓存中，不需要对SQL层进行分析。关系数据库在硬盘上存储数据，自然的查询速度远比NoSQL数据库慢。
    存储数据的格式：NoSQL的存储格式是key，value形式、文档形式、图片形式等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库只支持基础类型。
    扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。NoSQL基于键值对，数据之间没有耦合性，所以非常易于水平扩展。
    持久存储：NoSQL不适用于持久存储，海量数据的持久存储，还是需要关系型数据库。
    数据一致性：非关系数据库通常强调数据的最终一致性，而不是像关系数据库那样强烈的数据一致性，以及从非关系数据库读取的数据仍可能处于中间状态，NoSQL不提供对事务的处理。

二、功能
    每个数据库都包含集合，而集合又包含文档，每个文档可以具有不同数量的字段。每个文档的大小和内容可以互不相同。
    在使用mongodb插入数据时，每个document中必须有一个_id字段，且可以是任意类型，如果没有单独设置_id，mongodb会自动生成一个_id字段，类型是ObjectId。这是一个24位的字符串，
    实际上是由一组十六进制的字符构成，总共用了12字节的存储空间，分成四个部分：  63abe49b 080cbc d47e 4769b5
        前4个字节表示时间戳；
        接下来的3个字节是机器标识码；
        紧接的两个字节由进程id组成（PID）；
        最后三个字节是自增计数器生成的随机数。

三、为什么使用MongoDB
（1）面向文档：不是以关系类型的格式存储数据，而是将数据存储在文件中。
（2）临时查询：支持按字段，范围查询和正则表达式搜索，可以查询返回文档中的特定字段。
（3）索引：MongoDB文档中的任何字段都可以建立索引。
（4）复制：MongoDB可以提供副本集的高可用性，副本集由两个或多个mongo数据库实例组成，每个副本集成员可以随时充当主副本或辅助副本的角色。主副本是与客户端
（5）交互并执行所有读/写操作的主服务器。辅助副本使用内置复制维护主数据的副本。当主副本发生故障时，副本集将自动切换到辅助副本，然后它将成为主服务器。
（6）负载均衡：MongoDB使用分片的概念，通过在多个MongoDB实例之间拆分数据来水平扩展，MongoDB可以在多台服务器上运行，以平衡负载或复制数据，以便在硬件
（7）出现故障时保持系统正常运行。

1、MongoDB优点
（1）速度：MongoDB比一般的关系型数据库快很多，作为面向文档的NoSQL数据库，MongoDB可以通过索引使访问文档变得很容易而且快速
（2）分片：MongoDB另外一个优势是允许用户存储大量的数据，其通过分片的方式将数据分发到多个服务器上。
（3）灵活性：因为MongoDB是非结构化的数据库系统，而且多种数据类型，所以不需要像关系型数据那样，进行特别的表结构设计，存储数据更加灵活
（4）分布式：MongoDB数据库默认支持分布式，内带分布式的解决方案
2、MongoDB局限性
（1）不支持连接：与支持连接的理性数据库不同，MongoDB 不支持。尽管可以通过手动编码来添加连接功能，但执行起来可能会很慢并影响性能。
（2）数据大小有限制：MongoDB允许的文档最大值为16MB
（3）不能无限嵌套：MongoDB的数据格式是BSON的，但是其不支持无限的嵌套，用户不能超过100级的文档嵌套
（4）高内存：MongoDB会存储每个值对的键名。它还受到数据冗余的影响，因为它缺乏连接的功能。这会导致高内存使用率。
（5）不支持业务复杂查询：MySQL这些类型数据库都可以进行表连接等等复杂业务查询，MongoDB是文档型的数据库，所以不支持联表(Collection)查询
3、适用场景
（1）网站实时数据:MongoDB 非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。
（2）数据缓存:由于性能很高，MongoDB 也适合作为信息基础设施的缓存层。在系统重启之后，由 MongoDB搭建的持久化缓存层可以避免下层的数据源过载。
（3）大尺寸、低价值数据存储:使用传统的关系型数据库存储一些数据时可能会比较昂贵，在此之前，很多时候程序员往往会选择传统的文件进行存储。
（4）高伸缩性场景:MongoDB 非常适合由数十或数百台服务器组成的数据库。MongoDB 的路线图中已经包含对 MapReduce 引擎的内置支持。
（5）对象或 JSON 数据存储:MongoDB 的 BSON 数据格式非常适合文档化格式的存储及查询。
4、不适用场景
（1）高度事务性系统:例如银行或会计这些金融系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。
（2）传统的商业智能应用:针对特定问题的 BI 数据库会对产生高度优化的查询方式。对于此类应用，关系型可能是更合适的选择。

四、CRUD语法
    use testdb；    新建数据库。
    db.collection.operation()       collection：集合名称，即表名；operation：操作方法。
    db.collection.drop() 删除数据库

    admin: 从权限角度来看，这是“root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。
    local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。
    config: 当mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。

1、insert
    #单条插入
    db.collection.insertOne({
        {"name":{"firstName": "Alice", "lastName": "Wang"}, "balance": 100, "currency":["CNY", "USD"], "gender": 1}
    })
    db.accounts.insertOne({
        "name": {
            "firstName": "Alice",
            "lastName": "wang"
        },
        "balance": 50,
        "currency": [
            "CNY",
            "USD"
        ],
        "gender": 2
    })
    #批量插入
    db.transactions.insertMany([
        {"name":{"firstName":"Alice","lastName":"Wang"}, "balance": 50, "currency":["CNY", "USD"], "gender": 2},
        {"name":{"firstName":"Mike","lastName":"Zhang"}, "balance": 80, "currency":"GBP", "gender": 1},
        {"name":{"firstName":"Jack","lastName":"Ma"}, "balance": 100, "currency":"CNY", "gender": 1},
        {"name":{"firstName":"Jane","lastName":"May"}, "balance": 200, "currency":["CNY", "GBP"], "gender": 2},
        {"name":{"firstName":"Lucy","lastName":"Liu"}, "balance": 150, "currency":["CNY", "USD"], "gender": 2}
    ])
    db.transactions.insertMany([
        {"symbol": "600519", "qty": 100, "price": 567.4, "currency": "CNY"},
        {"symbol": "AMZN", "qty": 1, "price": 1377.5, "currency": "USD"},
        {"symbol": "AAPL", "qty": 2, "price": 150.7, "currency": "USD"}
    ])
    #批量插入用try{} catch(){}，如果某条数据插入失败将会终止插入，但已经插入的数据不会回滚掉
    try {
        db.collection.insertMany([
        {"name":{"firstName":"Alice","lastName":"Wang"}, "balance": 50, "currency":["CNY", "USD"], "gender": 2},
        {"name":{"firstName":"Mike","lastName":"Zhang"}, "balance": 80, "currency":"GBP", "gender": 1},
        {"name":{"firstName":"Jack","lastName":"Ma"}, "balance": 100, "currency":"CNY", "gender": 1}])
    } catch(e) {
        print(e)
    }

 2、find
    #查询，{}中可以添加筛选条件，例如：qty: 25 或qty: {$in: [25, 85]}  $gt $lt $or /^p/ 以p开头
    db.collection.find({})
    #查询并显示指定字段，1-显示，0-显示，例如：tags: 0
    db.collection.find({"balance": 100}, {currency: 1})
    #查询一条，{}中可以添加筛选条件
    db.collection.findOne({})
    #分页查询，每页两条，查询第二页
    db.collection.find({}).limit(2).skip(2)
    #排序查询，默认是按照id升序，1-升序，-1降序
    db.collection.find({"name.firstName","name.lastName"}).sort({"balance": -1, "gender": 1})
    #统计数据
    db.collection.countDocuments({})
    db.accounts.countDocuments({"gender":2})
    #复杂查询
    db.collection.find({$and:[{}, {}]})     $or:[{},{}]
    db.accounts.find({$and:[{"balance":{$gt:{100}}}, {"name.firstName":"Lucy"}]})
    db.accounts.find({$or:[{"balance":{$gt:{100}}}, {"name.firstName":"Lucy"}]})
    #数组查询
    db.collection.find([{
        array:{
            $elemMatch:{
                field:{
                    $exists: true
                }
            }
        }
    }])
    db.accounts.find({
        "currency":{
            $elemMatch:{
                $in:["USD"]
            }
        }
    })

    db.teachingPlanTemplate_copy.find({
	"_id": "63a5258dfbc32e3646057ead",
	"contentList": {
		$elemMatch: {
			"contentTemplateList": {
				$elemMatch: {
					"title.content": "教学内容"
				}
			}
		}
	}
})


3、update
    格式：db.collection.update(query, update, options)
    #覆盖的更新，把所有字段直接替换为指定的内容
    db.collection.update({"_id": ObjectId('63b57d57b7a04855a1a98efa')}, {$set: {"currency": ["CNY"]}})
    db.collection.update({"_id": ObjectId('63b57d57b7a04855a1a98efa')}, {$set: {"currency": ["CNY"]}}, {multi: true})
    #单条更新
    db.collection.updateOne(
        "_id": ObjectId('63b57d57b7a04855a1a98efa')}, 
        {$set: {
            "currency": ["CNY", "USD"]
        }
    )
    #单条更新，$是占位符，只会占用一个位置，也就是说只会更新数组中第一个被匹配的元素。如果是数组嵌套数组，
    #可以用$[i]进行表示，i表示第一个匹配到的位置，j表示第二个匹配到的位置。如果直接使用 $[] 就会修改指定数组字段中的所有元素
    # $regex 是模糊查询，/^xxx/ 表示以什么开头，/xxx^/ 表示以什么结尾。
    #如果update的字段是原来不存在的，则mongodb会自动添加这个字段
    # arrayFilters 是数组过滤条件
    db.teachingPlanTemplate_copy.updateOne(
        {
	        "_id": ObjectId("63a5272afbc32e3646057eaf"),
	        "contentList.contentTemplateList.title.content": "教学内容"
        }, {
            "$set": {
                "contentList.$[i].contentTemplateList.$[j].title.split": "1"
            }
        }, {
            arrayFilters: [{
                "i.title.content": "主体部分"
            }, {
                "j.title.content":  {
                    $regex: "/^教学内容/"
                }
            }]
        })
    #批量更新
    db.collection.updateMany(
        {"balance": {$lt: 100}},
        {
            $set: {"currency": ["CNY", "GBP"], gender: 1},
            $currentDate: {lastModified: true}
        }
    )
    #replace单条
    db.collection.replaceOne(
        {item: "paper"},
        {item: "paper", instock: [{warehouse: "A", qty: 60}, {warehouse: "B", qty: 40}]}
    )
4、delete
    #删除所有数据
    db.collection.remove({})
    #单条删除
    db.collection.deleteOne({"name.firstName": "Alice"})
    #批量删除，{}里面不加条件就是全部删除
    db.collection.deleteMany({gender: 2})
五、索引和聚合
1、聚合
    主要用于处理数据（统计平均值，求和等），并返回计算后的数据结果。
    db.collection.aggregate(<pipeline>, <options>)，基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，
    然后经过一系列的处理，输出相应的结果。
    allowDiskUse: <boolean> 每个聚合管道阶段使用的内存不能超过100MB，如果数据量较大，为了防止聚合管道阶段内存上限并抛出错误，可以启用allowDiskUse，启用之后，聚合阶段的
        可以在内存容量不足时，将操作数据写入临时文件中，会写入dbPath下的_tmp文件夹，dbPath的默认值为/data/db。
        db.collection.aggregate([{}],{allowDiskUse: true})
    $project：可以从文档中选择想要的字段和不想要的字段，也可以通过管道表达式进行一些复杂的操作，例如数学操作，日期操作，字符串操作，逻辑操作。相当于SQL中的as。
        { $project: {<specification>}}
            $project 管道符的作用是选择字段（指定字段，添加字段，不显示字段，排除字段等），重命名字段，派生字段。
            <field>: <1 or 0>   1-输入字段，0-不输出字段
            常用运算符：
                $map、$reduce、$filter
                $range
                $add、$substract、$multiply、$divide（加减乘除）
                $substr、$concat、$toLower、$toUpper（字符串的截取、拼接、大小写）
                $year、$month、$dayOfMonth、$hour、$minute、$second（取出日期时间中对应的数据）
        🌰例子：
        db.collection.aggregate([
            {
                $project: {
                    _id: 0,
                    name: 1,
                    nameArray: [ "$name.firstName", "$name.lastName" ]       如果使用不存在的字段就会返回null
                }
            }
        ])
    $match：接受一个指定查询条件的文档。查询语法与读操作查询语法相同，用于过滤数据，相当于SQL的where。
        { $match: {<query>}}
        $match阶段必须是管道的第一阶段
        常用运算符：
            $eq、$gt、$gte、$lt、$lte
            $and、$or、$not、$in
            $geoWithin、$Intersect
        🌰例子：
        db.collection.aggregate([
            {
                $match: {
                    "name.firstName": "alice"
                }
            }
        ])
        db.collection.aggregate([
            {
                $match: {
                    $or: [
                        { score: { $gt: 40, $lt: 80 }},
                        { "name.firstName": "alice" }
                    ]
                }
            }
        ])
    $group：将集合中的文档分组，可用于统计结果。注意分组统计后的结果是一个文档对象还是一个数组。
        {$group: {_id: <expression>, <field>: {<accumulator1> : <expression>}, ...}}
        _id必填字段，表示以什么分组，但是可以指定_id值为null来统计整个集合。剩余的字段是可选的，并使用<accumulator>运算符进行计算。
        _id和<accumulator>表达式可以接受任何有效的表达式
        不使用聚合操作符的情况下，$group可以返回管道文档中某一字段的所有（不重复的）值。
        常用操作符：
            $sum({"$sum":1} 表示统计结果，{"$sum":"$key"}对那个key求和)，$avg，$min，$max
            $push，在结果文档中插入值到一个数组中
            $addToSet，在结果文档中插入值到一个集合中
            $first，根据资源文档的排序获取第一个文档数据
            $last，根据资源文档的排序获取最后一个文档数据
        🌰例子：
        db.transactions.aggregate([
            {
                $group: {
                    _id: "$currency"
                }
            }
        ])
        db.transactions.aggregate([
            {
                $group: {
                    _id: "$currency",
                    totalQty: {$sum: "$qty"},
                    totalNotional: {$sum: {$multiply: ["$price", "$qty"]}},
                    avgPrice: {$avg: "$price"},
                    count: {$sum: 1},
                    maxNotional: {$max: {$multiply: ["$price", "$qty"]}},
                    minNotional: {$min: {$multiply: ["$price", "$qty"]}}
                }
            }
        ])
        db.transactions.aggregate([
            {
                $group:{
                    _id: "$currency",
                    symbols: {$push: "$symbol"}
                }
            }
        ])
    $limit：限制传递到管道中下一阶段的文档数。
        🌰例子：
        db.collection.aggregate([
            { $limit: 1 }
        ])
    $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
        🌰例子：
        $db.collection.aggregate([
            { $skip: 1 }
        ])
    $sort：将输入文档排序后输出。
    $unwind：将包含数组的文档拆分为多个单独的文档，每个单独文档都包含数组的值
        {
            $unwind:
                {
                    path: <field path>,
                    includeArrayIndex: <string>,
                    preserveNullAndEmptyArrays: <boolean>
                }
        }
        path: 需要拆分的数组（没有下面两个参数时可以写为 {$unwind:"$key"}）
        includeArrayIndex，分配一个存该数组索引的字段，可不写，如果该字段为非数组则返回结果为null
        preserveNullAndEmptyArrays，是否输出空内容，可不写，true为输出
        🌰例子：
        db.collection.aggregate([
            {
                $unwind: {
                    path: "$currency"
                }
            }
        ])
    $lookup，连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似SQL的左连接。
    {
        $lookup:
            {
                from: <collection to join>,
                localField: <field from the input document>,
                foreignField: <field from the documents of the "from" collection>,
                as: <output array field>
            }

        #适用于不相关查询
        $lookup:
            {
                from: <collection to join>,
                let: {<var_1>: <expression>, ..., <var_n>: <expression> },
                pipeline: [<pipeline to execute on the collection to join>],
                as: <output array field>
            }
    }
        from：同一个数据库下等待被join的集合
        localField：当前集合中的key，如果输入的集合中，文档没有localField这个key（Field），在处理过程中，会默认为此文档含有localField：null的键值对
        foreignField：待join集合的key，如果待join的集合中，文档没有foreignField值，在处理过程中，会默认为此文档含有foreignField：null的键值对
        as：为输出文档的新增key命名。如果输入的集合中存在，则会覆盖掉
        let：对查询集合中的文档使用聚合阶段进行处理时，如果需要参考管道文档中的字段，则必须使用let参数对字段进行声明。
        🌰例子：
        db.collection.aggregate([
            {
                $lookup: {
                    from: "otherDB",
                    localField: "local",
                    foreignField: "other",
                    as: "newName"
                }
            }
        ])
    $count：在前面的聚合操作之后统计结果数
        ${ $count: <string>}
        🌰例子：
        db.collection.aggregate([
            {
                $group: {""},
                $count: {
                    ""
                }
            }
        ])
    $bucket：对集合中的某个字段做分区间统计
    $facet：对集合中的多个字段做分区间统计，就是包含多个$bucket的操作
    $out: 将聚合管道中的文档写入一个新的集合
        🌰例子：
        db.transactions.aggregate([
            {
                $group:{
                    _id: "$currency",
                    symbols: {$push: "$symbol"}
                }
            },
            {
                $out: "output"
            }
        ])
        #如果把管道中的数据输入到一个已经存在的集合中时，会覆盖掉已存在的数据，存入新的数据，如果聚合管道操作遇到错误，管道阶段不会创建新集合或是覆盖已存在的集合内容。
        db.transactions.aggregate([
            {
                $group: {
                    _id: "$symbol",
                    totalNotional: {$sum: {$multiply: ["$price", "$qty"]}}
                }
            }, 
            {
                $out: "output"
            }
        ])

    #sort对应的条件，1是升序，-1是降序
    db.accounts.aggregate([
        {$match: {"gender": 2}},
        {$group: {_id: "$_id", total: {"$sum": "$balance"}}},
        {$sort: {balance: -1}}
    ])

    #集合统计查询
    db.collection.aggregate([
        {
            $group: {
                _id: null,
                count: { $sum: 1 }
            }
        }
    ])
    相当于SQL：select count(*) as count from collection;

    #对某字段求和查询
    db.collection.aggregate([
        {
            $group: {
                _id: null,
                total: { $sum: "$price" }
            }
        }
    ])
    相当于SQL：select sum(price) as total from collection;

    #对每一个唯一的cust_id，计算price总和
    db.collection.aggregate([
        {
            $group: {
                _id: "$cust_id",
                total: { $sum: "$price" }
            }
        }
    ])
    相当于SQL：select cust_id, sum(price) as total from collection group by cust_id;

    #对每一个唯一对cust_id和ord_date分组，计算price总和，不包括日期的时间部分
    db.collection.aggregate([
        {
            $group: {
                _id: {
                    cust_id: "$cust_id",
                    ord_date: {
                        month: { $month: "$ord_date" },
                        day: { $dayOfMonth: "$ord_date" },
                        year: { $year: "$ord_date"}
                    }
                }
            },
            total: { $sum: "$price"}
        }
    ])
    相当于SQL：select cust_id, ord_date, sum(price) as total from collection group by cust_id, ord_date

    #对每个唯一的cust_id和ord_date分组，计算价格总和，并只返回price总和大于250的记录，且排除日期的时间部分
    db.collection.aggregate([
        {
            $group: {
                _id: {
                    cust_id: "$cust_id",
                    ord_date: {
                        month: { $month: "$ord_date" },
                        day: { $dayOfMonth: "$ord_date" },
                        year: { $year: "$ord_date" }
                    }
                },
                total: { $sum: "$price" }
            }
        },
        { $match: { total: { $gt : 250} } }
    ])
    相当于SQL：select cust_id, ord_date, sum(price) as total from collection group by cust_id, ord_date having total > 250

    #对每个唯一的cust_id且status=A，计算price总和并且只返回price总和大于250的记录
    db.collection.aggregate([
        { $match: { status: 'A'} },
        {
            $group: {
                _id: "$cust_id",
                total: { $sum: "$price"}
            }
        },
        { $match: { total: { $gt: 250} } }
    ])
    相当于SQL：select cust_id, sum(price) as total from collection where status = 'A' group by cust_id having total > 250

    #对每个唯一的cust_id，将与collection相关联的相应订单项order_lineItem的qty字段进行总计
    db.collection.aggregate([
        { $unwind: "$items" },
        { $group: {
            _id: "$cust_id",
            qty: { $sum: "$items.qty" }
        }}
    ])
    相当于SQL：select cust_id, sum(li. qty) as qty from collection c, order_lineItem li where li.order_id = c.id group by cust_id

    #统计不同cust_id和ord_date分组的数量，排除日期的时间部分
    db.collection.aggregate([
        {
            $group: {
                _id: {
                    cust_id: "$cust_id",
                    ord_date: {
                        month: { $month: "$ord_date" },
                        day: { $dayOfMonth: "$ord_date" },
                        year: { $year: "$ord_date"}
                    }
                }
            }
        },
        {
            $group: {
                _id: null,
                count: {$sum: 1}
            }
        }
    ])
    相当于SQL：select count(*) from (select cust_id, ord_date from collection group by cust_id, ord_date) as DerivedTable

    db.accounts.aggregate([{
        $lookup: {
            from: "collection",
            localField: "currency",
            foreignField: "ccy",
            as: "forexData"
        }
    }])

    db.accounts.aggregate([{
        $lookup: {
            from: "collection",
            pipeline: [{
                $match: {
                    "ccy": "USD"
                }
            }],
            as: "forexData"
        }
    }])

    db.accounts.aggregate([{
        $lookup: {
            from: "collection",
            let: {
                bal: "$balance"
            },
            pipeline: [{
                $match: {
                    $expr: {
                        $and: [
                            {$eq: ["$ccy", "USD"]}, 
                            {$gt: ["$$bal",100]
                        }]
                    }
                }
            }],
            as: "forexData"
        }
    }])

聚合操作的优化：
顺序优化：
    1、$project + $match，$match阶段会在$project阶段之前运行
    优化前：
        db.transactions.aggregate([
            {
                $project: {
                    _id: 0, symbol: 1, currency: 1,
                    notional: {$multiply: ["$price", "$qty"]}
                }
            },
            {
                $match: {
                    currency: "USD",
                    notional: { $gt: 1000}
                }
            }
        ])
    优化后：
        db.transactions.aggregate([
            {
                $match: {
                    currency: "USD"
                }
            },
            {
                $project: {
                    _id: 0, symbol: 1, currency: 1,
                    notional: {$multiply: ["$price", "$qty"]}
                }
            },
            {
                $match: {
                    notional: { $gt: 1000}
                }
            }
        ])
    2、$sort + $match，$match阶段会在$sort阶段之前运行
        db.transactions.aggregate([
            {
                $match: {
                    currency: "USD"
                }
            },
            {
                $sort: {
                    price: 1
                }
            }
        ])
    3、$project + $skip，$skip会在$project阶段之前运行
    优化前：
        db.transactions.aggregate([
            {
                $project: {
                    _id: 0, symbol: 1, currency: 1,
                    notional: {$multiply: ["$price", "$qty"]}
                }
            },
            {
                $skip: 2
            }
        ])
    优化后：
        db.transactions.aggregate([
            {
                $skip: 2
            },
            {
                $project: {
                    _id: 0, symbol: 1, currency: 1,
                    notional: {$multiply: ["$price", "$qty"]}
                }
            }
        ])
合并优化：
    1、$sort + $limit如果两者之间没有夹杂着会改变文档数量的聚合阶段，$sort和$limit阶段可以合并。
        db.transactions.aggregate([
            {
                $sort: {price: 1}
            },
            {
                $project: {
                    _id: 0, symbol: 1, currency: 1,
                    notional: {$multiply: ["$price", "$qty"]}
                }
            },
            {
                $limit: 2
            }
        ])
    2、$limit + $limit, $skip + $skip, $match + $match  连续的$limit，$skip或$match阶段排列在一起时，可以合并为一个阶段。
        {$limit: 10}, {$limit: 5}       {$limit: 5}
    3、$lookup + $unwind，连续排列在一起的$lookup和$unwind阶段，如果$unwind应用在$lookup阶段创建的as字段上，则两者可以合并
    优化前：
        db.accounts.aggregate([
            {
                $lookup:{
                    from: "collection",
                    localField: "currency",
                    foreignField: "ccy",
                    as: "forexData"
                }
            },
            {
                $unwind: "$forexData"
            }
        ])
    优化后：
        db.accounts.aggregate([
            {
                $lookup:{
                    from: "collection",
                    localField: "currency",
                    foreignField: "ccy",
                    as: "forexData"
                }
                +
                {$unwind: "$forexData"}
            }  
        ])
2、索引
    对指定字段进行排序的数据结构。B-tree
    如果没有索引的话就是全集合的扫描。
    #单一索引，1代表升序，-1代表降序
    db.collection.createIndex({score: 1})
    #复合索引
    db.collection.createIndex({"item": 1, "stock": 1})
    #多键索引
    db.collection.createIndex({"addr.zip": 1})
    #查看索引集合
    db.collection.getIndexes()
    #查看集合索引大小
    db.collection.totalIndexSize()
    #删除集合所有索引
    db.collection.dropIndexes()
    #删除集合指定索引
    db.collection.dropIndex("索引名称")
    #索引执行计划，查看语句是否执行了索引
    db.collection.find(query, options).explan(options)


六、索引详解
    MongoDB使用的索引的数据结构是普通的B-Tree。