Nginx
学习链接：  https://juejin.cn/post/6844904144235413512

1.定义
    Nginx是开源、高性能、高可靠的Web和反向代理服务器，而且支持热部署，几乎可以做到7*24小时不间断运行，即使运行几个月也不需要重新启动，
    而且还能在不间断服务的情况下对软件版本进行热更新。其占用内存少、并发能力强、能支持高达5w个并发连接数。
    最重要的使用场景：
        静态资源服务，通过本地文件系统提供服务；
        反向代理服务，延伸出包括缓存、负载均衡等；
        API服务，OpenResty；

2.简单请求和非简单请求
    如果同时满足下面两个条件，就属于简单请求：
        请求方法是HEAD、GET、POST三种之一；
        HTTP头信息不超过右边这几个字段：Accept、Accept-Language、Content-Language、Last-Event—ID Content-Type 只限于三个值
        application/x-www-form-urlencoded、multipart/form-data、text/plain;
    凡是不满足这两个条件的，都属于非简单请求。
（1）简单请求
    对于简单请求，浏览器会在头信息中增加 Origin 字段后直接发出，Origin 字段用来说明，本次请求来自哪个源（协议+域名+端口）。如果服务器发现Origin
    指定的源不在许可范围内，服务器会返回一个正常的HTTP回应，浏览器取到回应之后发现回应的头信息中没有包含 Access-Control-Allow-Origin 字段，
    就抛出一个错误给 XHR 的error事件。如果服务器发现 Origin 指定的域名在许可范围内，服务器返回的响应会多出几个Access-Control开头的头信息字段。
（2）非简单请求
    非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或 Content-Type 值为 application/json 。浏览器会在正式通信之前，
    发送一次HTTP预检 OPTIONS 请求，先询问服务器，当前网页所在的域名是否会在服务器的许可名单中，以及可以使用哪些HTTP请求方法和头信息字段。只有得到
    肯定答复，浏览器才会发出正式的 XHR 请求，否则报错。

3.跨域
    在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是跨域请求。跨域是浏览器的同源策略决定的，是一个重要的浏览器安全策略，用于限制一个
    origin 的文档或者它加载的脚本于另一个同源的资源进行交互，能够帮助阻隔恶意文档，减少可能被攻击的媒介，可以使用CORS配置解除这个限制。

    # 同源的例子
    http://example.com/app1/index.html  # 只是路径不同
    http://example.com/app2/index.html

    http://Example.com:80  # 只是大小写差异
    http://example.com

    # 不同源的例子
    http://example.com/app1   # 协议不同
    https://example.com/app2

    http://example.com        # host 不同
    http://www.example.com
    http://myapp.example.com

    http://example.com        # 端口不同
    http://example.com:8080

4.正向代理和反向代理
    正向代理（Forward Proxy）：
        一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向正向代理服务器发送请求，并指定目标服务器（原始服务器），
        然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端不可见。
    反向代理（Reverse Proxy）：
        与一般访问流程相比，使用反向代理后，直接收到请求的服务器是代理服务器，然后将请求转发给内部网络上真正进行处理的服务器，得到的结果返回给客户端。
        反向代理隐藏了真实的服务器，为服务器首发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。

5.负载均衡
    请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分
    发到各个服务器上，将负载分发到不同的服务器，这就是负载均衡，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。

6.动静分离
    为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。一般来说，都需要将动态资源和静态资源
    分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的
    请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。
