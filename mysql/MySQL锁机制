Mysql锁机制
    粒度：全局锁、表级锁、页级锁、行级锁
    模式：乐观锁、悲观锁
    属性：共享锁、排他锁
    状态：意向共享锁、意向排他锁
    算法：间隙锁、临键锁、记录锁

一、全局锁、表级锁、页级锁、行级锁
1、全局锁
    全局锁就是对整个数据库实例加锁，应用于全库逻辑备份（mysqldump）。
（2）实现
    mysql提供了加全局锁的方法，命令是 Flush tables with read lock (FTWRL)。
    当需要整个库处于只读状态的时候，可以使用这个命令，之后其他线程的数据更新语句（增删改）、数据定义语句（建表、修改表结构）和更新类事务的提交语句。
    风险点：如果在主库上备份，备份期间不能执行更新操作，业务基本上停止。如果在从库上备份，那么备份期间从库不能执行主库同步过来的binlog，导致主从延迟。
    解决办法：mysqldump使用参数 --single-trasaction，启动一个事务，确保拿到一致性视图。由于MVCC的支持，这个过程中的数据是可以正常更新的。

    还有一种方式是 set global readonly = true。
        readonly可以让全库进入只读模式，但是readonly的值会被用来做其他逻辑，比如判断是主库还是从库。
        如果执行FTWRL命令之后由于客户端异常断开，那么mysql会释放这个全局锁，数据库可以回到正常的更新状态，而将整个库设置为readonly之后，客户端发生异常，数据库还是会保持只读状态，导致整个库长时间处于不可写状态，风险较高。
        readonly对super用户权限无效。
2、表级锁
    对当前操作的整张表进行加锁，MyISAM与InnoDB都支持表锁，有两种：表锁、元数据锁（meta data lock，MDL）
（1）表锁
    lcok tables 表名 read       该表可以读，不能ddl和dml中增删改，只能读取表数据。
    lock tables 表名 write      既不能读也不能写
    可以用unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象（如果在某个线程 A 中执行 lock tables t1 read, t2 write; 
    这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。）。
（2）MDL（metadata lock）锁
    MDL作用是防止 DDL 和 DML 并发的冲突，保证读写的正确性。
    另一类表级的锁是MDL。MDL不需要显式使用，在访问一个表的时候会被自动加上。如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表进行修改，删了一列，那么查询线程拿到的结果跟表结构对不上。
    在 MySQL 5.5 版本中引入了 MDL，'当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁'。
    读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。

    例子🌰：
    sessionA:
        begin;
        select * from table limit 1;
    sessionB:
        select * from table limit 1;
    sessionC:
        alter table add f int;
    sessionD:
        select * from table limit 1;
    
    sessionA会先启动，对表加一个MDL读锁，由于sessionB需要的也是读锁，因此可以正常执行。sessionC会被blocked，因为sessionA的读锁还没有释放，而sessionC需要写锁，因此只能被阻塞。
    之后所有要在表上新申请读锁的请求也会被sessionC阻塞。所有对表的增删改查操作都需要先申请MDL读锁，而这时读锁没有释放，对表alter的操作会给表加上写锁，这时对表就完全不可读写了。
    事务中的MDL锁在语句执行开始时申请，但是语句结束后并不会马上释放，而是等整个事务提交后再释放。
    '一般行锁都有锁超时时间，但是MDL锁没有时间的限制，只要事务没有提交就会一直锁住'。
    解决办法：
        提交或者回滚这个事务。通过 information_schema.innodb_trx 查看事务的执行时间。
        select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(), trx_started)) > 60;
        select now();
        根据事务的执行时间判断是否需要对相对应的线程进行操作，进去commit或者rollback，或者kill掉。
3、页级锁
    页级锁是MySQL中锁定粒度介于行级锁和表级锁之间。表级锁速度快，但是冲突多，行级锁冲突少，但速度慢，而页级锁一次锁定相邻的一组数据。BDB引擎支持页级锁。
4、行级锁
    行级锁是粒度最小的一种锁，发生冲突的概率最小，并发度最高，但是加锁速度慢、开销大，容易发生死锁。MySQL中InnoDB支持行级锁，分为乐观锁和悲观锁。
（1）实现
    在MySQL中行级锁并不是直接锁记录而是锁索引，如果一条sql语句操作了主键索引，mysql就会锁定这条主键索引；如果操作的是非主键索引，mysql会先锁定该非主键索引再锁定相关的主键索引。
    在update、delete 操作时，mysql不仅锁定where条件扫描过的所有索引记录，而且会锁定相邻的键值，即next-key locking。

    例子🌰：
    sessionA:
        begin;
        update table set num = num - 1 where id = 1;
    sessionB:
        update table set num = num - 1 where id = 1;

    sessionA执行了更新操作，但是没有提交事务，sessionB去执行更新操作的时候就会等待，在等待sessionA释放锁时就会出现锁定超时警告。但是执行 id=2 的操作是可以执行成功的。

二、乐观锁、悲观锁
1、乐观锁
    乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候才会对数据的冲突与否进行检测，如果发现了冲突，则返回给用户自己判断，让用户决定如何去做。
    适用于读多写少的场景，如果出现大量的写操作，写冲突的可能性就会增大。
（1）实现
    一般使用数据版本记录机制实现，即在数据表中添加一个数字类型的version字段来实现。当读取数据时，将version字段值一同读出，数据每更新一次就将version值+1。当提交更新时，判断
    数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果与取出来的version值相等则更新，否则认为是过期数据。

    例子🌰：
    查询订单信息
    select id, status, version from order where id = #{id}
    用户支付成功
    修改订单状态
    update set status = 支付成功, version = version + 1 where id = #{id} and version = #{version};
2、悲观锁
    具有强烈的独占性和排他性，每次拿数据的时候都认为别人会修改，在整个数据处理过程中，将数据处于锁定状态。
    适用于并发量不大、写入操作比较频繁、数据一致性比较高的场景。
（1）实现
    在MySQL中使用悲观锁，必须关闭MySQL的自动提交，set autocommit = 0. 共享锁和排他锁是悲观锁的不同的实现。
    MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住。

    例子🌰：
    开启事务并关闭自动提交
        set autocommit = 0;
    查询商品信息
        begin;
        select id, name, num from goods where id = 1 for update;
    用户下单，生成订单
    修改商品库存
        update set num = num - 1 where id = 1;
    提交事务
        commit;
    
    select ... for update 是mysql提供的实现悲观锁的方式，属于排他锁，在goods表中，id为1的那条数据就被当前事务锁定了，其他的要执行select ... for update; 
    的事务必须等本次事务提交后才能执行。我们可以保证当前的数据不会被其他事务修改。
    
三、共享锁、排他锁
1、共享锁
    又称为读锁，简称S锁，当事务A对数据加上读锁后，其他事务只能对该数据加读锁，不能做任何修改操作，也就是不能加写锁。只有当事务A上的读锁被释放后，其他事务才能对其添加写锁。
（1）实现
    select ... lock in share mode

    例子🌰：
    sessionA:
        select * from table where id = 1 lock in share mode;
    sessionB:
        update table set num = num - 1 where id = 1;

    sessionA持有共享锁，未提交，sessionB的查询不受影响，但是update会被阻塞，直到超时
2、排他锁
    又称为写锁，简称X锁，当事务对数据加上写锁之后，其他事务既不能对该数据添加读锁，也不能对该数据添加写锁，写锁与其他锁都是互斥的。只有当前数据写锁被释放后，其他事务才能
    对其添加写锁或者读锁。
（1）实现
    select ... for update
    如果查询条件用了索引/主键，那么select ..... for update就会进行行锁。
    如果是普通字段(没有索引/主键)，那么select ..... for update就会进行锁表。

    例子🌰：
    sessionA:
        begin;
        select * from table where id = 1 for update;
    sessionB:
        begin;
        select * from table where id = 1 for update;
    
    因为sessionA对该数据添加了写锁，并且sessionA的事务没有提交，那么sessionB给改数据加写锁的时候就会阻塞，直到事务提交超时。

四、意向共享锁、意向排他锁
    意向锁是表锁，为了协调行锁和表锁的关系，支持多粒度（表锁与行锁）的锁并存。'意向锁不会与行级的共享、排他锁互斥。'
    当事务A有行锁时，Mysql会自动为该表添加意向锁，事务B如果想申请整个表的写锁，那么不需要遍历每一行判断是否存在行锁，而直接判断是否存在意向锁，增强性能。

    例子🌰：
    sessionA:
        begin;
        select * from table where id = 1 for update;    #此时table存在两把锁：table上的意向排他锁与id为1的数据行上的排他锁
    sessionB:
        begin;
        lock tables table read;     #sessionB想获取table的共享锁。

    sessionB检测sessionA持有table表的意向排他锁，就可以得知sessionA必然持有该表中某些行的排他锁，那么sessionB对table表的加锁请求就会被排斥（阻塞），而无需去检测每一行数据是否存在排他锁。

五、间隙锁、临键锁、记录锁
    间隙锁、临键锁、记录锁都是排他锁。
1、记录锁
    记录锁是封锁记录，记录锁也叫行锁

    例子🌰：
        select * from table where id = 1 for update;
    会在id=1的记录上加上记录锁，以阻止其他事务插入，更新，删除id=1这一行。

2、间隙锁
    基于非唯一索引，锁定一段范围内的索引记录。使用间隙锁锁住的是一个区间，不仅仅是这个区间中的每一条数据。

    例子🌰：
        select * from table where id between 1 and 10 for update;
    所有在（1，10）区间的记录行都会被锁住，所有id为2、3、4、5、6、7、8、9的数据行的插入会被阻塞，但是1和10两条记录并不会被锁住。

3、临键锁
    是记录锁与间隙锁的组合，封闭范围既包含索引记录，又包含索引区间，是一个左开右闭区间。临键锁的主要目的，也是为了避免幻读。如果把事务隔离级别降级为RC，临键锁则也会失效。
    每个数据行上的非唯一索引列上都存在一把临键锁，当某个事务持有该数据行的临键锁时，会锁住一段左开右闭区间的数据。
    InnoDB中行级锁是基于索引实现的，临键锁只与非唯一索引列有关，在唯一索引列（包括主键列）上不存在临键锁。

    例子🌰：
    sessionA:
        select * from table;
            id    name    num
            1     苹果     96
            2     香蕉     99
        update table set name = '苹果2' where num = 96;
    sessionB:
        begin;
        insert into table (id, name, num) values (100, 苹果3, 97);

    table表中隐藏的临键锁有 (-∞, 96], (96, 99], (99, +∞]
    sessionA对num为96的列进行update操作的同时，也获取了(-∞, 96], (96, 99]这两个区间内的临键锁。在根据非唯一索引对记录行进行 UPDATE \ FOR UPDATE \LOCK IN SHARE MODE 操作时，
    InnoDB 会获取该记录行的临键锁，公式为：左gap lock + record lock + 右gap lock。即sessionA在执行了上述的 SQL 后，最终被锁住的记录区间为 (-∞, 99)。

六、死锁
    MyISAM表锁是deadlock free的，因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。
    在InnoDB中，除单个SQL组成的事务外，锁是逐步获得的，发生死锁是可能的。发生死锁后，InnoDB一般都能自动检测到，并使一个事务释放锁并退回（将持有最少行级排他锁的事务进行回滚），
        另一个事务获得锁继续完成事务。涉及外部锁，或涉及锁的情况下并不能完全自动检测死锁，需要通过设置锁等待参数'innodb_lock_wait_timeout'来解决。这个参数并不是只用来解决
        死锁问题，在并发访问比较高的情况下，如果大量事务因无法立即获取所需要的锁而挂起，会占用大量计算机资源，造成严重的性能问题，甚至拖垮数据库。可以设置合适的锁等待超时阈值，
        避免这种情况发生。
        
    例子🌰：
        在 可重复读 下，如果两个线程同时对相同条件记录用 select ... for update 加排他锁，在没有符合该记录的情况下，两个线程都会加锁成功。程序发现记录尚不存在就试图
        插入一条新记录，两个线程都这么做就会出现死锁，这种情况下将隔离级别改成 read commited，就可以避免问题。
        在 读提交 下，如果两个线程同时对不存在记录使用 select ... for update ，发现不存在就会插入一条新记录，此时只有一个事务执行插入操作，当该事务执行成功提交之后，另一线程执行
        插入操作，会因主键重复而出错，但是该线程却获得了一个排他锁，此时如果有第三个线程来申请排他锁，也会出现死锁。

    如果出现死锁，可以用 SHOW ENGINE INNODB STATUS 命令来确定最后一个死锁产生的原因和改进措施。
    

七、索引与锁
    利用索引优化锁，索引可以减少锁定的行数，可以加快处理速度，同时也加快了锁的释放。
