学习链接：  https://mp.weixin.qq.com/s/BMQC2oJlhLoeBDtveXgHpw

1.单表优化
（1）字段优化
    尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED。
    varchar的长度只分配真正需要的空间。
    使用枚举或整数代替字符串类型。
    尽量使用timestamp而非datetime。
    单表不要有太多字段，建议在20以内。
    避免使用null字段，很难查询优化且占用额外索引空间。
    用整型来存ip
（2）索引
    索引并不是越多越好，要根据查询有针对性的创建，考虑在where和order by命令上涉及的列建立索引，可根据explain来查看是否用了索引还是全表扫描。
    尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描。
    值分布很稀少的字段不适合建索引，例如“性别”这种只有两个值的字段。
    字符字段只建前缀索引。
（3）查询sql
    可通过开启查询慢日志来找出较慢的sql。
    不做列运算：select id where age + 1 = 10，任何对列的操作都将导致表扫描，包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至
等号右边。
    sql语句尽可能简单：一条sql只能在一个cpu运算；大语句拆小语句，减少锁时间。
    or 改写成in：or的效率是n级别，in的效率是log（n）级别，in的个数建议控制在200以内。
    避免在where子句中使用 != 或 <> 操作符，否则引擎将放弃使用索引而进行全表扫描。
    对于连续数据，使用 between 不用 in 。
（4）读写分离
（5）缓存
（6）垂直拆分
    垂直分库是根据数据库里面的数据表的相关性进行拆分，比如：一个数据库里面既存在用户数据，又存在订单数据，那么垂直拆分可以把用户数据放到用户库、
把订单数据放到订单库。垂直分表是对数据表进行垂直拆分的一种方式，常见的是把一个多字段的大表按常用字段和非常用字段进行拆分，每个表里面的数据记录数
一般情况下是相同的，只是字段不一样，使用主键关联。
    垂直拆分的优点是：
        可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少I/O次数(每次查询时读取的Block 就少)
        可以达到最大化利用Cache的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起
        数据维护简单
    缺点是：
        主键出现冗余，需要管理冗余列
        会引起表连接JOIN操作（增加CPU开销）可以通过在业务服务器上进行join来减少数据库压力
        依然存在单表数据量过大的问题（需要水平拆分）
        事务处理复杂
（7）水平拆分
    水平拆分是通过某种策略将数据分片来存储，分库内分表和分库两部分，每片数据会分散到不同的MySQL表或库，达到分布式的效果，能够支持非常大的数据量。
前面的表分区本质上也是一种特殊的库内分表库内分表，仅仅是单纯的解决了单一表数据过大的问题，由于没有把表的数据分布到不同的机器上，因此对于减轻MySQL
服务器的压力来说，并没有太大的作用，大家还是竞争同一个物理机上的IO、CPU、网络，这个就要通过分库来解决。
    水平拆分的优点是:
        不存在单库大数据和高并发的性能瓶颈
        应用端改造较少
        提高了系统的稳定性和负载能力
    缺点是：
        分片事务一致性难以解决
        跨节点Join性能差，逻辑复杂
        数据多次扩展难度跟维护量极大