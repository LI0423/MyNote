1.WITH AS
    也叫做子查询部分，可以定义一个SQL片段，该SQL片段会被整个SQL语句的可读性更高，也可以用在UNION ALL的不同部分，作为提供数据的部分。
    对与UNION ALL，使用WITH AS定义了一个UNION ALL语句，当该片段被调用2次以上，优化器会将该WITH AS短语所获取的数据放入一个Temp表中，
    [WITH <common_table_express> [ ,n]]
    <common_table_express>::=
            expression_name [(column_name [ ,n])]
        AS
            (CTE_query_definition)

2.SUM 和 CASE WHEN 组合使用
    sum(case when type = 1 then 1 when type = 2 then 1 ... end)
    计算某几种类型数据的总和。 

3.两个查询结果计算并转换为百分比形式
    select rate from (truncate(((select data from table where condition1 )/(select data from table where condition2))*100,2),'%') as rate

4.EXPLAIN 查询sql语句的执行计划
    explain select * from emp where name = 'Jefabc';
    （1）id：选择标识符。
        select的查询序列号，id如果相同，可以认为是一组，从上往下执行；如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行。
    （2）select_type：查询中每个select子句的类型
        SIMPLE：单表查询，简单select，不使用UNION或子查询等。
        PRIMARY：子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY。
        DERIVED：在from查询中的子查询，结果存放在临时表中。
        SUBQUERY：在where列表中包含了子查询。
        DEPENDENT SUBQUERY：在select或where列表中包含了子查询，子查询基于外层。
        UNION：UNION中的第二个或后面的select语句。
        DEPENDENT UNION：UNION中的第二个或后面的select语句，取决于外面的查询
        UNION RESULT：UNION的结果，UNION语句中第二个select开始后面所有的select
    （3）table：数据库中表名称，显示这一行的数据是关于哪张表的
    （4）type：对表访问方式，标识MySQL在表中找到所需行的方式。最好到最坏依次是：
    system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > all
        ALL：Full Table Scan，MySQL将遍历全表以找到匹配的行。
        INDEX：Full Index Scan，遍历索引树。使用了索引但没有通过索引进行过滤，一般是使用了覆盖索引或是利用索引进行了排序分组。
        RANGE：只检索给定范围的行，使用一个索引来选择行。
        ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。
        eq_ref：类似ref，使用的是唯一索引，对于每个索引键值，表中只有一条记录匹配，就是多表连接中使用primary key或unique key作为关联条件。
        const：表最多有一个匹配行，const用于比较primary key或者unique索引。
        system：表仅有一行，是const类型的特例。
        NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。
    （5）possible_keys：指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用，如果没有任何索引显示为null。
        该列独立于EXPLAIN输出所示的表的次序，在possible_keys中的某些键实际上不能按生成的表次序使用。
    （6）key：显示MySQL实际决定使用的键（索引），必然包含在possible_keys中。
        如果没有选择索引，键是NULL，要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。
    （7）key_len：表示索引中使用的字节数，可通过该列计算查询中使用的索引长度（显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据定义计算而得，
    不是通过表内检索出的）。不损失精度的情况下，长度越短越好。
    （8）ref：列与索引的比较，表示表的连接匹配条件，哪些列或常量被用于查找索引列上的值。
    （9）rows：估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算找到所需的记录需要读取的行数。越小越好。
    （10）filtered: 返回结果的行占需要读到的行(rows列的值)的百分比。
    （11）extra：包含MySQL解决查询的详细信息。
        Using where：不用读取表中所有信息，仅通过索引仅可以获取所需数据，发生在对表的全部的请求列都是同一个索引的部分的时候，
            表示MySQL服务器将在存储引擎检索行后再进行过滤。
        Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询。出现该值就表示sql需要优化了。
            MySQL 表关联的算法是 Nest Loop Join，是通过驱动表的结果集作为循环基础数据，然后一条一条地通过该结果集中的数据作为过滤条件到下一个表中查询数据，
            然后合并结果。EXPLAIN 结果中，第一行出现的表就是驱动表，对驱动表可以直接排序，对非驱动表（的字段排序）需要对循环查询的合并结果（临时表）进行排序。
        Using filesort：当Query中包含order by操作，而且无法利用索引完成的排序操作称为“文件排序”。
        Using join buffer：表示在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现该值，应该注意根据查询的具体情况可能需要天机索引来改进。
        Impossible where：强调了where语句会导致没有符合条件的行。
        Select table optimized away：意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行。

5.查看sql的执行周期
    （1）查看profile是否开启。
        show variables like '%profiling%';
    （2）开启profiling。
        set profiling = 1;
    （3）使用profile可以查看最近的几次查询。
        show profiles;
    （4）根据Query_ID查看sql的具体执行步骤。
        show profile cpu,block io for query Query_ID;
    （5）sql的大致查询流程
            mysql客户端通过协议与mysql服务器建立连接，发送查询语句，检查缓存，如果命中直接返回结果，否则进行语句解析，也就是说在进行解析查询之前，服务器会先访问查询缓存，
        缓存中存储了select语句以及相应的查询结果集。如果查询结果已经在缓存中了，就不会进行解析、优化、执行。会直接将缓存中的结果返回给用户。
            语法解析器和预处理：首先mysql通过关键字将SQL语句进行解析，并生成一颗对应的解析树。mysql解析器使用mysql语法规则验证和解析查询；预处理根据一些mysql规则进一步
        检查解析树是否合法。
            查询优化器当解析树被认为是合法的了，并且由优化器将其转化为Explain。优化器的作用就是找到多种执行方式中最好的Explain。
    （6）SQL语句的书写顺序
        SELECT-DISTINCT-FROM-JOIN ON-WHERE-GROUP BY-HAVING-ORDER BY-LIMIT
    （7）SQL语句的真正执行顺序
        FROM-ON-JOIN-WHERE-GROUP BY-HAVING-SELECT-DISTINCT-ORDER BY-LIMIT

6.MySQL索引分类
    （1）单值索引index
    一个索引只包含单个列，一个表可以有多个单列索引。
        随表一起创建
            create table table_name(id int auto_increment,...,primary key(id),key(column_name));
        单独创建
            create index idx_colume_name on table_name(column_name);
        查看表的索引
            show index from 表名
            show keys from 表名
    （2）唯一索引
    索引列的值必须唯一，但允许有空值。
        随表一起创建
            unique(column_name)
        单独创建
            create unique index idx_colume_name on table_name(column_name);
    （3）主键索引
    设定为主键后数据库会自动建立索引，innodb为聚簇索引。
        删除主键索引
            alter table table_name drop primary key;
    （4）复合索引
    一个索引包含多个列
        随表一起建索引
            key(column_name1,column_name2)
        单独创建
            create index idx_name on table_name(column_name1,column_name2);

7.自定义列
    生成列表序号
    select -1 into @curClassId;     给自定义字段赋值，如果没有这条语句，在某些情况下，后面的SQL运行会出现排名全部为1的情况。
    select -1 into @rank;

    筛选出每个班级的前十名：
    select id, name, gender, age, class_id, score, newRank
    from (
        select *,
                @rank := if(@curClassId = class_id, @rank + 1, 1) as newRank,
                @curClassId := class_id
        from student, (select @curClassId := -1) t1, (select @rank := -1) t2
        where class_id in ('','')
        order by class_id, score desc
    ) tmp 
    where newRank <= 10
    order by class_id, newRank

    自定义字段有两种声明方式，一种是在查询语句前进行声明，第二种是在查询语句中将声明当作临时表进行查询。

8.mysqldump备份、还原、导入、导出
    mysqldump -u用户名 -p密码 -h主机 数据库 a -w "sql条件" -lock-all-tables > 路径
    mysqldump -u用户名 -p密码 -h主机 数据库 < 路径
    mysqldump -u用户名 -p密码 -h主机 数据库 a -where "条件语句" -no-create-info > 路径
    mysqldump -u用户名 -p密码 -h主机 数据库 表

    主要参数：
    --all-databases 缩写 -A，备份所有库
    --all-tablespaces 缩写 -Y，备份所有表空间
    --no-tablespaces 缩写 -y，不备份任何表空间
    --add-drop-database 在create database前添加drop database
    --add-drop-table 默认开启，在create table前添加drop table
    --skip-add-drop-table 禁用“--add-drop-table”
    --add-locks 默认开启，在insert语句前添加lock tables，语句后添加unlock tables
    --skip-add-locks 禁用“--add-locks”
    --comments* 默认开启，缩写 -i，添加注释信息
    --skip-comments 禁用“--comments*”
    --compatible=name 导出的数据将和哪种数据库或哪个旧版本的MySQL服务器相兼容，值可以为oracle、postgresql。。。多个用逗号分隔
    --complete-insert 缩写 -c，使用带有完整列名的insert语句，默认不带列名
    --compress 缩写 -C，在服务端和客户端的协议中使用压缩
    --create-options 默认开启，缩写-a，包含所有MySQL的特定创建选项
    --databases 缩写 -B，备份多个数据库，如果没有使用-tables选项，后边的值都将被认为是数据库名，多个用逗号分隔，将会在输出文件中添加 use db_name
    --default-character-set 默认utf8，设置默认字符集
    --disable-keys 默认开启，缩写 -K，insert语句前添加“/*!40000 ALTER TABLE tb_name DISABLE KEYS */;”禁用索引，insert语句后添加“/*!40000 ALTER TABLE tb_name ENABLE KEYS */;”
    启用索引；因为一次创建索引比逐行创建效率更高，这样可以提高数据恢复效率。
    --events 缩写 -E，备份事件
    --extended-insert 默认开启，缩写 -e，使用包含多个值列表的多行插入语法
    --skip-extended-insert 禁用“--extended-insert“
    --lock-all-tables 缩写 -x，在备份期间通过获取全局读取来锁定所有库和所有表，将会自动关闭--single-transaction 和 --lock-tables
    --lock-tables 默认开启，缩写 -l，对需要备份的库的所有表加读锁，事务型表使用--single-transaction而非--lock-tables
    --log-queries 默认开启，数据恢复时，如果日志记录是打开的，把查询记录到常规和慢查询日志中
    --single-transaction 通过在一个事务中备份所有表来创建一致性快照

9.MySQL执行顺序
（1）FROM：首先选择出需要从数据库中执行哪张表；
（2）ON：执行“JOIN”语句时，“ON”用于确定表的绑定关系，通过“ON”条件产生临时中间表；
（3）WHERE：基于指定的条件对记录进行筛选；
（4）GROUP BY：将数据划分成多个组别；
（5）HAVING：使用“HAVING”子句筛选满足特定条件的组别；
（6）SELECT：选择需要显示的字段；
（7）DISTINCT：筛选重复数据，去除重复记录；
（8）ORDER BY：对数据进行排序，按照指定的顺序显示记录；
（9）LIMIT：进行结果限定，选择显示的记录条数。

10.复制表结构、表数据、索引
（1）创建表不复制数据（含表结构和索引、自增等约束）
    create table {table_new} like {table_old};
（2）不建表只复制数据（数据来自select）
    insert into {table_new} select * from {table_old};
（3）创建表并复制数据（表结构来自select，不含索引等约束）
    create table {table_new} select * from {table_old};