1.相关术语
    连接点（JoinPoint）：表示需要在程序中插入横切关注点的扩展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点。
    切入点（PointCut）：选择一组相关连接点的模式，即可以认为连接点的集合，Spring默认使用AspectJ语法。
    通知（Advice）：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（Before Advice）、后置通知（After Advice）、
        环绕通知（Around）、异常通知（After-throwing）、返回通知（After-returning），在spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知。
    切面（Aspect）：横切关注点的模块化，可以认为是通知、引入和切入点的组合，在spring中可以使用Schema和@AspectJ方式进行组织实现。
    引入（inter-type）：也称内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口到所有被代理对象。
    目标对象（Target Object）：需要被织入横切关注点的对象，由于spring AOP通过代理模式实现，而这个对象永远是被代理对象。
    织入（Weaving）：把切面连接到其他的应用程序类型或者对象上，并创建一个被通知的对象。可以在编译时，类加载时和运行时完成。spring在运行时完成织入。
    AOP代理（AOP Proxy）：AOP框架使用代理模式创建对象，从而实现在连接点处插入通知，在spring中AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。

2.AOP配置方式
（1）XML Schema配置方式
（2）AspectJ注解方式

3.@Transaction实现原理
    通过aop的方式进行管理，实现事务开启、提交或者回滚操作。

4.@Pointcut的12种用法
（1）execution
    格式：execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)
    带‘?’的是可选项，ret-type-pattern,name-pattern,parameters-pattern是必选项。
    modifer-pattern? 修饰符匹配，public表示匹配公有方法；
    ret-type-pattern 返回值匹配，*表示任何返回值，全路径的类名等；
    declaring-type-pattern? 类路径匹配；
    name-pattern 方法名匹配，*代表所有，set* 代表所有以set开头的方法；
    (param-pattern) 参数匹配，指定方法参数（声明的类型），(..)代表所有参数，(*,String)代表第一个参数为任何值，第二个参数为String类型，
(..,String)代表最后一个参数是String类型；
    throws-pattern? 异常类型匹配

    ‘*’：匹配任何数量字符；
    ‘..’：匹配任何数量字符的重复，如在类型模式中匹配任何数量子包，在方法参数模式中匹配任何数量参数
    ‘+’：匹配指定类型及其子类型，仅能作为后缀放在类型模式后边
（2）within
    格式：within(类型表达式),目标对象target的类型是否和within中指定的类型匹配
    within(com.test..*) test包以及子包下的任何方法执行。
    within(com.test..Service+) test包或所有子包下Service类型及子类型的任何方法。
    within(com.test.service.Service1) Service1中定义的所有方法，不包含其子类中的方法。
（3）this
    格式：this(类型全限定名)，通过aop创建的代理对象的类型是否和this中指定的类型匹配；判断的目标是代理对象；this中使用的表达式必须是类型全限定名，
    不支持通配符。
（4）target
    格式：target(类型全限定名)，判断目标对象的类型是否和指定类型匹配；判断的是目标对象的类型；表达式必须是类型全限定名，不支持通配符。
（5）args
    格式：args(参数类型列表)，匹配当前执行的方法传入的参数是否为args中指定的类型；匹配传入的参数类型，不是匹配方法签名的参数类型；
    参数类型列表中的参数必须是类型全限定名，不支持通配符；args属于动态切入点，也就是执行方法的时候进行判断，开销大，非特殊情况不要使用。
    args(String)匹配只有一个参数且传入的参数类型是String类型的方法。
    args(*,String)匹配只有2个参数的且第2个参数是String的方法。
    args(..,String)匹配最后1个参数是String的方法。
（6）@within
    格式：@within(注解类型)，匹配指定的注解内定义的方法。
    调用目标方法的时候，通过Java中Method.getDeclaringClass()获取当前的方法是哪个类中定义的，然后看这个类上是否有指定的注解。
    目标对象上有@within中指定的注解，这种情况下目标对象的所有方法都会被拦截。
    定义注解时未使用@Inherited说明子类无法继承父类上的注解。
（7）@target
    格式：@target(注解类型)，判断目标对象target类型上是否有指定的注解，@target中注解类型也必须是全限定类型名。
    注解直接标注在目标类上；注解标注在父类上，注解上没有@Inherited这种情况下目标类无法匹配到。
（8）@args
    格式：@args(注解类型)：方法参数所属的类上有指定的注解；不是参数上有指定的注解而是参数类型的类上有指定的注解。
（9）@annotation
    格式：@annotation(注解类型)：匹配被调用的方法上有指定的注解。
（10）@bean
    格式：bean(bean名称)，用在spring环境中，匹配容器中指定名称的bean。
（11）reference pointcut
    表示引用其他命名切入点。可以将切入专门放在一个类中集中定义，其他地方可以通过引用的方式引入其他类中定义的切入点。
    
    public class AspectPcDefine {
        @Pointcut("bean(bean1)")
        public void pc1(){
        }

        @Pointcut("bean(bean2)")
        public void pc2(){
        }
    }

    @Aspect
    public class AspectTest{
        @Pointcut("com.test.AspectPcDefine.pc1()")
        public void pointcut1(){
        }
    }
（12）组合型的pointcut
    &&：多个匹配都需要满足
    ||：多个匹配中只需满足一个
    ！：匹配不满足的情况下
    @Pointcut("bean(bean1) || bean(bean2)") //匹配bean1或者bean2
    @Pointcut("@target(Ann1) && @target(Ann2)") //匹配目标类上有Ann1注解以及Ann2注解
    @Pointcut("@target(Ann1) && !@target(Ann2)") //匹配目标类上有Ann1注解但是没有Ann2注解

5.@Aspect中的5种通知
（1）@Before：前置通知，在方法执行之前执行
    被@Before标注的方法参数可以为空，或者为JoinPoint类型，当为JoinPoint类型时，必须为第一个参数。
    通知中获取被调用方法信息：
        非环绕通知，可以将org.aspectj.lang.JoinPoint作为通知方法的第一个参数，通过该参数获取被调用方法的信息。
        环绕通知，将org.aspectj.lang.ProceedingJoinPoint作为方法的第一个参数，通过该参数获取信息。
（2）@Around：环绕通知
（3）@Afte：后置通知
    不管目标方法是否有异常，后置通知都会执行。
（4）@AfterReturning：返回通知
    可以获取到方法的返回值，当目标方法返回异常的时候，这个方法不会被调用。
    该注解用到了两个参数：
        value：用来指定切入点
        returning：用来指定返回值对应方法的参数名称，返回值对应方法的第二个参数。
（5）@AfterThrowing：异常通知
    被标注的方法可以指定异常的类型，当被调用的方法触发该异常及其子类型的异常之后，会触发异常的回调，
    也可以不指定异常类型，此时会匹配所有异常。

6.综合示例
    //自定义注解，指定使用范围在方法上
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.METHOD)
    public @interface LogRecord {

        String opName();

        String desc() default "";
    }

    //这个类使用@Aspect进行标注
    @Aspect
    @Component
    public class LogAspect {

        private ThreadLocal<LogRecordEntity> threadLocal = new ThreadLocal<>();

        @Pointcut("@annotation(com.example.demo.aop.LogRecord)")
        public void pointcut() {
        }

        @Before("pointcut()")
        public void before() {
            System.out.println("前置通知");
        }

        @After("pointcut()")
        public void after() {
            System.out.println("后置通知");
        }

        @Around("pointcut()")
        public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
            String requestTime = String.valueOf(System.currentTimeMillis());
            System.out.println("环绕通知前。。。。。。");

            HttpServletRequest request = HttpRequestUtil.getRequest();
            if (request == null) {
                return null;
            }

            LogRecordEntity logRecord = new LogRecordEntity();
            logRecord.setId(UUID.randomUUID().toString().replace("-", ""));
            logRecord.setPath(request.getRequestURI());
            logRecord.setMethod(request.getMethod());
            logRecord.setRequestIp(request.getRemoteHost());
            logRecord.setRequestTime(requestTime);

            MethodSignature signature = (MethodSignature) joinPoint.getSignature();
            Method method = signature.getMethod();
            if (method.isAnnotationPresent(LogRecord.class)) {
                LogRecord annotation = method.getAnnotation(LogRecord.class);
                logRecord.setOpName(annotation.opName());
            }

            String inputParam = Arrays.toString(joinPoint.getArgs());
            logRecord.setInputParam(inputParam);

            String name = method.getName();
            logRecord.setQualifiedName(name);

            threadLocal.set(logRecord);

            Object proceed = joinPoint.proceed();
            System.out.println("环绕通知后。。。。。。");

            return proceed;
        }

        @AfterReturning(value = "pointcut()", returning = "ret")
        public Object afterReturning(Object ret) {
            System.out.println("返回值通知。。。。。。");

            LogRecordEntity logRecord = this.getLogRecordEntity();
            String outputParam = ret.toString();

            logRecord.setOutParam(outputParam);
            logRecord.setStatus("成功");

            System.out.println(logRecord);
            threadLocal.remove();

            return ret;
        }

        @AfterThrowing(value = "pointcut()", throwing = "ex")
        public void throwingAdvice(Throwable ex) {
            System.out.println("异常通知。。。。。。");

            LogRecordEntity logRecordEntity = this.getLogRecordEntity();
            logRecordEntity.setErrMessage(ex.getMessage());
            logRecordEntity.setStatus("失败");

            System.out.println(logRecordEntity);
            threadLocal.remove();
        }

        private LogRecordEntity getLogRecordEntity() {
            LogRecordEntity logRecord = threadLocal.get();
            long start = Long.parseLong(logRecord.getRequestTime());
            long end = System.currentTimeMillis();

            logRecord.setCostTime(start - end + "ms");
            logRecord.setResponseTime(String.valueOf(end));
            return logRecord;
        }
    }

    //实体类
    @NoArgsConstructor
    @Setter
    @Getter
    public class LogRecordEntity implements Serializable {

        private String id;

        private String opName;

        private String path;

        private String method;

        private String requestIp;

        private String qualifiedName;

        private String inputParam;

        private String outParam;

        private String errMessage;

        private String requestTime;

        private String responseTime;

        private String costTime;

        private String status;

        @Override
        public String toString() {
            return "LogRecordEntity{" +
                    "id='" + id + '\'' +
                    ", opName='" + opName + '\'' +
                    ", path='" + path + '\'' +
                    ", method='" + method + '\'' +
                    ", requestIp='" + requestIp + '\'' +
                    ", qualifiedName='" + qualifiedName + '\'' +
                    ", inputParam='" + inputParam + '\'' +
                    ", outParam='" + outParam + '\'' +
                    ", errMessage='" + errMessage + '\'' +
                    ", requestTime='" + requestTime + '\'' +
                    ", responseTime='" + responseTime + '\'' +
                    ", costTime='" + costTime + '\'' +
                    ", status='" + status + '\'' +
                    '}';
        }
    }

    //测试
    @RestController
    @RequestMapping("/api/aop")
    public class LogController {
        @LogRecord(opName = "测试日志", desc = "测试日志描述内容")
        @GetMapping("/log")
        public String demo(@RequestParam("id") String id,
                        @RequestParam("name") String name){
            System.out.println("业务逻辑代码。。。。。。");
            return "success";
        }

        @LogRecord(opName = "测试异常日志", desc = "异常日志描述内容")
        @GetMapping("/err")
        public String errDemo(){
            System.out.println("业务异常。。。。。。");
            int i = 10 /0 ;
            return "err";
        }
    }

7.可以触发SpringAOP增强功能的注解
（1）事务管理相关注解
    @Transactional：在类或方法上使用，Spring会自动创建代理，以确保事务的开始、提交和回滚。
（2）缓存管理相关注解
    @Cacheable：在方法上使用，表示结果会被缓存，下次调用时直接从缓存获取数据，而不再执行方法。
    @CachePut：用于更新缓存，方法执行后将结果存入缓存。
    @CacheEvict：用于清楚缓存，支持按条件清除指定的缓存或清空整个缓存。
    @Caching：允许组合多个缓存操作注解，适合复杂的缓存操作需求。
（3）异步任务管理相关注解
    @Async：用于将方法异步执行，通常在方法耗时且不需立即返回结果时使用。Spring会创建代理，将标注的异步方法在单独的线程中执行。
（4）调度任务相关注解
    @Scheduled：用于在指定时间或周期性地执行方法。Spring会创建代理，负责按时间间隔或指定的Cron表达式触发方法。
（5）AspectJ AOP注解
    @Aspect：定义一个类为切面，包含一组切点和增强。
    @Before：定义在切点方法前执行的增强逻辑。
    @After、@AfterReturning、@AfterThrowing：定义在切点方法执行后执行的增强逻辑。
    @Around：环绕通知，可以控制方法执行前后的逻辑。
（6）权限和安全相关注解
    @PreAuthorize：用于方法调用前进行权限检查，通常基于表达式定义。
    @PostAuthorze：在方法调用后进行权限检查。
    @Secured：用于限制方法访问权限，需要用户具备特定的角色。
    @RolesAllowed：类似于@Secured
（7）自定义注解