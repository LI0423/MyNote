迭代器模式
    1.定义
        提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。
    2.优缺点
    （1）优点：
        访问一个聚合对象的内容而无须暴露它的内部表示。
        遍历任务交由迭代器完成，简化了聚合类。
        支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。
        增加新的聚合类和迭代器类都很方便，无须修改原有代码。
        封装性良好，为遍历不同的聚合结构提供一个统一的接口。
    （2）缺点：
        增加了类的个数，在一定程度上增加了系统的复杂性。
    3.结构
    （1）抽象聚合角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。
    （2）具体聚合角色：实现抽象聚合类，返回一个具体迭代器的实例。
    （3）抽象迭代器角色：定义访问和遍历聚合元素的接口，通常包含hasNext()、first()、next()等方法。
    （4）具体迭代器角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。
    4.实现
    //抽象聚合
    interface Aggregate {
        public void add(Object obj);

        public void remove(Object obj);

        public Iterator getIterator();
    }

    //具体聚合
    class ConcreteAggregate implements Aggregate {
        private List<Object> list = new ArrayList<Object>();

        public void add(Object obj){
            list.add(obj);
        }

        public void remove(Object obj){
            list.remove(obj);
        }

        public Iterator getIterator(){
            return (new ConcreteIterator(list));
        }
    }

    //抽象迭代器
    interface Iterator {
        Object first();

        Object next();

        boolean hasNext();
    }

    //具体迭代器
    class ConcreteIterator implements Iterator {
        private List<Object> list = null;

        private int index = -1;

        public ConcreteIterator(List<Object> list){
            this.list = list;
        }

        public boolean hasNext(){
            if(index < list.size() -1){
                return true;
            }else{
                return false;
            }
        }

        public Object first(){
            index = 0;
            Object obj = list.get(index);
            return obj;
        }

        public Object next(){
            Object obj = null;
            if(this.hasNext()){
                obj = list.get(++index);
            }
            return obj;
        }
    }

    public class IteratorPattern {
        public void main(String[] args){
            Aggregate ag = new ConcreteAggregate();
            ag.add("中山大学");
            ag.add("华南理工");
            System.out.println("聚合的内容有：");
            Iterator it = ag.getIterator();
            while(it.hasNext()){
                Object ob = it.next();
                System.out.println(ob.toString() + "\t");
            }
            Object ob = it.first();
            System.out.println("\nFirst:"+ob.toString());
        }
    }