原型模式
    1.定义
        用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的对象。原型实例指定了要创建的对象的种类。
    2.优缺点
    （1）优点：
        Java自带的原型模式基于内存的二进制流的复制，在性能上比直接new一个对象更加优良。
        可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，以便在需要的时候使用（例如恢复到历史某一状态），可辅助实现撤销操作。
    （2）缺点：
        需要为每一个类都配置一个clone方法。
        当对象之间存在多重嵌套引用，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来比较麻烦。
    3.结构
    （1）抽象原型类：规定了具体原型对象必须实现的接口。
    （2）具体原型类：实现抽象原型类的clone()方法，是可被复制的对象。
    （3）访问类：使用具体原型类中的clone()方法来创建新的对象。
    4.实现
    浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。
    深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。

    class RealizeType implements Cloneable{
        RealizeType(){
            System.out.println("具体原型创建成功");
        }

        public Object clone() throws CloneNotSupportedException{
            System.out.println("具体原型复制成功");
            return (RealizeType) super.clone();
        }
    }

    5.应用场景
    （1）对象之间相同或相似，即只是个别的几个属性不同的时候。
    （2）创建对象成本较大，例如初始化时间长，占用CPU太多等。
    （3）系统中大量使用该类对象，且各个调用者都需要给它的属性重新赋值。

    public abstract class Prototype {
        abstract Prototype myClone();
    }

    public class ConcretePrototype extends Prototype {
        private String field;

        public ConcretePrototype (String field) {
            this.field = field;
        }

        @Override
        Prototype myClone(){
            return new ConcretePrototype(field);
        }

        @Override
        public String toString(){
            return field;
        }
    }

    public class Client {
        public static void main(String[] args) {
            Prototype prototype = new ConcretePrototype("abc");
            Prototype clone = prototype.myClone();
        }
    }