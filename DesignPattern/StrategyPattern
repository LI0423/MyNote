策略模式
    1.定义
        该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。
    2.优缺点
    （1）优点：
        多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。
        提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，避免重复的代码。
        提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。
    （2）缺点：
        客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。
        策略模式造成很多的策略类，增加维护难度。
    3.结构
    （1）抽象策略类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。
    （2）具体策略类：实现了抽象策略定义的接口，提供具体的算法实现。
    （3）环境类：持有一个策略类的引用，最终给客户端调用。
    4.实现
    //抽象策略类
    interface Strategy{
        public void strategyMethod();   //策略方法
    }

    //具体策略类A
    class ConcreteStrategyA implements Strategy {
        public void strategyMethod(){
            System.out.println("具体策略A的策略方法被访问");
        }
    }

    //具体策略类B
    class ConcreteStrategyB implements Strategy {
        public void strategyMethod(){
            System.out.println("具体策略B的策略方法被访问");
        }
    }

    class Context {
        private Strategy strategy;

        public Strategy getStrategy(){
            return strategy;
        }

        public void setStrategy(Strategy strategy){
            this.strategy = strategy;
        }

        public void strategyMethod(){
            strategy.strategyMethod();
        }
    }
    5.例子🌰：
    public interface QuackBehavior {
        void quack();
    }

    public class Quack implements QuackBehavior {
        @Override
        public void quack(){
            System.out.println("quack!");
        }
    }

    public class Squeak implements QuackBehavior {
        @Override
        public void quack(){
            System.out.println("squeack");
        }
    }

    public class Duck{
        private QuackBehavior quackBehavior;

        public void performQuack(){
            if(quackBehavior != null){
                quackBehavior.quack();
            }
        }

        public void setQuackBehavior(QuackBehavior quackBehavior){
            this.quackBehavior = quackBehavior;
        }
    }

    public class client{
        public static void main(String[] args){
            Duck duck = new Duck();
            duck.setQuackBehavior(new Squeak());
            duck.performQuack();
            duck.setQuackBehavior(new Quack());
            duck.performQuack();
        }
    }