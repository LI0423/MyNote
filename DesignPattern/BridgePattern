桥接模式
    1.定义
        将抽象与显示分离，可以独立变化，用组合关系代替继承关系来实现，降低抽象和实现这两个可变维度的耦合。
    2.优缺点
    （1）优点：
        扩展能力强，实现细节对客户透明。
    （2）缺点：
        聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确识别出系统中两个独立变化的维度。
    3.结构
    （1）抽象化角色：定义抽象类，并包含一个对实现化对象的引用。
    （2）扩展抽象化角色：是抽象化角色的子类，实现父类中的业务方法，通过组合关系调用实现化角色中的业务方法。
    （3）实现化角色：定义实现化角色的接口，供扩展抽象化角色调用。
    （4）具体实现化角色：给出实现化角色接口的具体实现。
    4.实现
    public class BridgeTest{
        public static void main(String[] args){
            Implementor imple = new ConcreteImplementorA();
            Abseraction abs = new RefinedAbstraction(imple);
            abs.Operation();
        }
    }

    //实现化角色
    interface Implementor {
        public void OperationImpl();
    }

    //具体实现化角色
    class ConcreteImplementorA implements Implementor{
        public void OperationImpl(){
            System.out.println("具体实现化角色被访问")
        }
    }

    //抽象化角色
    abstract class Abstraction{
        protected Implementor imple;

        protected Abstraction(Implementor imple){
            this.imple = imple;
        }

        public abstract void Operation();
    }
    
    //扩展抽象化角色
    class RefinedAbstraction extends Abstraction{
        protected RefinedAbstraction(Implementor imple){
            super(imple);
        }

        public void Operation(){
            System.out.println("扩展抽象化角色被访问")
        }
    }