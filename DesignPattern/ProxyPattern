代理模式
    1.定义
        由于某些原因需要给对象提供一个代理以控制对该对象的访问，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象
    之间的中介。
    2.优缺点
    （1）优点：
        代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用。
        代理对象可以扩展目标对象的功能。
        代理模式能将客户端与目标对象分离，在一定成都上降低了系统的耦合度。
    （2）缺点：
        会造成系统设计中类的数量增加。
        在客户端和目标对象之间增加一个代理对象会造成请求处理速度变慢。
        增加系统的复杂度。
    3.结构
    （1）抽象主题类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。
    （2）真实主题类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。
    （3）代理类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，可以访问、控制或扩展真实主题的功能。
    4.实现
    静态代理：由程序员创建代理类或特定工具自动生成源代码再对其编译，在程序运行前代理类的.class文件就已经存在了。
    public class ProxyTest{
        public static void main(String[] args){
            Proxy proxy = new Proxy();
            proxy.Request();
        }
    }

    //抽象主题
    interface Subject{
        void Request();
    }

    //真实主题
    class RealSubject implements Subject{
        public void Request(){
            System.out.println("访问真实主题方法");
        }
    }

    //代理
    class Proxy implements Subject {
        private RealSubject realSubject;

        public void Request(){
            if(realSubject == null){
                realSubject = new RealSubject();
            }

            preRequest();
            realSubject.Request();
            postRequest();
        }

        public void preRequest(){
            System.out.println("访问真实主题之前的预处理")
        }

        public void postRequest(){
            System.out.println("访问真实主题之后的处理")
        }
    }

    JDK动态代理：在程序运行时运用反射机制动态创建而成。
    public interface IHello{
        void sayHello();
    }
    public class HelloImpl implements IHello{
        @Override
        public void sayHello(){
            System.out.println("Hello World");
        }
    }
    public class MyInvocationHandler implements InvocationHandler{
        private Object target;
        public MyInvocationHandler(Object target){
            this.target = target;
        }

        @Override
        public Object invoke(Object proxy,Method method,Object[] args) throws Throwable{
            Object rs = method.invoke(target,args);
            return rs;
        }
    }
    public class MyProxyTest{
        public static void main(String[] args){
            IHello iHello2 = (IHello) Proxy.newProxyInstance(IHello.class.getClassLoader(), //加载接口的类加载器
                            new Class[]{IHello.class},  //代理需要实现的接口，可以有多个
                            new MyInvocationHandler(new HelloImpl()));  //自定义的InvocationHandler，方法调用的实际处理者。
            iHello2.sayHello();
        }
    }

    CGLIB动态代理：是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承方式实现代理。
    public class HelloConcrete{
        public String sayHello(String str){
            return "HelloConcrete: "+str;
        }
    }
    //实现一个MethodInterceptor，方法调用会被转发到该类的intercept（）方法
    class MyMethodInterceptor implements MethodInterceptor{
        @Override
        public Object intercept(Object obj,Method method,Object[] args,MethodProxy proxy) throws Throwable{
            logger.info("You said : " + Arrays.toString(args));
            return proxy.invokeSuper(obj,args);
        }
    }
    //在需要使用HelloConcrete的时候，通过CGLIB动态代理获取代理对象。
    Enhancer enhancer = new Enhancer();
    enhancer.setSuperclass(HelloConcrete.class);
    enhancer.setCallback(new MyMethodInterceptor());
    HelloConcrete hello = (HelloConcrete) enhancer.create();

一、JDK动态代理
    使用jdk动态代理模式实现对接口耗时的统计。
    public class CostTimeInvocationHandler implements InvocationHandler{
        private Object target;

        public CostTimeInvocationHandler(Object target){
            this.target = target;
        }

        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable{
            long startTime = System.nanoTime();
            Object result - method.invoke(this.target, args);
            long endTime = System.nanoTime();
            System.out.println(this.target.getClass() + "耗时：" + (endTime-startTime));
            return result;
        }

        public static <T> T createProxy(Object target, class<T> targetInterface){
            if(!targetInterface.isInterface()){
                throw new IllegalStateException("targetInterface 必须是接口类型");
            }else if(!targetInterface .isAssignableFrom(target.getClass())){
                throw new IllegalStateException("target 必须是targetInterface接口的实现类");
            }
            return (T) Proxy.newProxyInstance(target.getClass().getClassLoader(),
                            target.getClass().getInterfaces(),new CostTimeInvocationHandler(target));
        }
    }

    public void costTimeProxy(){
        IService serviceA = CostTimeInvocationHandler.createProxy(new ServiceA(),IService.class);
        serviceA.m1();
    }
二、cglib动态代理
    cglib是一个强大、高性能的字节码生成库，用于在运行时扩展Java类和实现接口；本质上是通过动态的生成一个子类去覆盖所要代理的类。
Enhancer可能是CGLIB中最常用的一个类，和jdk中的Proxy不同的是，Enhancer既能够代理普通的class，也能代理接口。Enhancer创建
一个被代理对象的子类并且拦截所有的方法调用（包括从Object中继承的toString和hashCode方法）。
    public class Service1 {
        public void m1(){
            System.out.println("我是m1方法");
        }

        public void m2(){
            System.out.println("我是m2方法");
        }
    }

    public class CglibTest{
        public void test1(){
            //1.创建Enhancer对象
            Enhancer enhancer = new Enhancer();
            //2.通过setSuperclass来设置父类型，即需要给哪个类创建代理类
            enhancer.setSuperclass(Service1.class);
            //3.设置回调，需要实现org.springframework.cglib.Callback接口
            enhancer.setCallback(new MethodInterceptor(){
                //代理对象方法拦截器
                @Override
                public void intercept(Object o, Method method,Object[] objects,MethodProxy methodProxy) throws Throwable{
                    System.out.println("调用方法："+method);
                    Object result = methodProxy.invokeSuper(o,objects);
                    return result;
                }
            });
            //4.获取代理对象，调用enhancer.create方法获取代理对象，这个方法返回的是Object类型的，所以需要强转
            Service1 proxy = (Service1) enhancer.create();
            //5.调用代理对象的方法
            proxy.m1();
            proxy.m2();
        }
    }

实现示例：
    @Component
    public class Service1 {
        public void m1(){
            System.out.println(this.getClass() + ".m1()");
        }
    }

    @Component
    public class Service2 {
        public void m2() {
            System.out.println(this.getClass() + ".m2()")
        }
    }

    public class CostTimeProxy implements MethodInterceptor{
        private Object target;

        public CostTimeProxy(Object target){
            this.target = target;
        }

        @Override
        public Object intercept(Object o, Method method, Object[] objects,
        MethodProxy methodProxy)throws Throwable{
            long startTime = System.nanoTime();
            //调用被代理对象（即target）的方法获取结果
            Object result = method.invoke(target,objects);
            long endTime = System.nanoTime();
            System.out.println(method + "，耗时：" + (endTime - startTime));
            return result;
        }

        public static <T> T createProxy(T target){
            CostTimeProxy costTimeProxy = new CostTimeProxy();
            Enhancer enhancer = new Enhancer();
            enhancer.setCallback(costTimeProxy);
            enhancer.setSuperclass(target.getClass());
            return (T) enhancer.create();
        }

    }

    public class MethodCostTimeProxyBeanPostProcessor implements BeanPostProcessor {
        @Nullable
        @Override
        public Object postProcessorAfterInitialization(Object bean,String beanName) throws BeansException {
            if(bean.getClass().getName().toLowerCase().contains("service")){
                return CostTimeProxy.createProxy(bean);
            }else{
                return bean;
            }
        }
    }

    public class MethodCostTimeImportSelector implements ImportSelector {
        @Override
        public String[] selectImports(AnnotationMetadata importingClassMeta){
            return new String[]{MethodCostTimeProxyBeanPostProcessor.class.getName()};
        }
    }

    @Target(ElementType.TYPE)
    @Retention(RetentionPolicy.RUNTIME)
    @Import(MethodCostTimeImportSelector.class)
    public @interface EnableMethodCostTime{
    }

    @ComponentScan
    @EnableMethodCostTime
    public class MainConfig{
    }

    @Test
    public void test(){
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(MainConfig.class);
        Service1 service1 = context.getBean(Service1.class);
        Service2 service2 = context.getBean(Service2.class);
        service1.m1();
        service2.m1();
    }