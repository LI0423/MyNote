单例模式
    1.定义
        指一个类只有一个实例，且该类能自行创建这个实例的一种模式。
    2.特点
        单例类只有一个实例对象；该单例对象必须由单例类自行创建；单例类对外提供一个访问该单例的全局访问点。
    3.优缺点
    （1）优点：
        单例模式可以保证内存里只有一个实例，减少内存开销。
        可以避免对资源的多重占用。
        设置全局访问点，可以优化和共享访问资源。
    （2）缺点：
        单例模式一般没有接口，扩展困难。如果要扩展，除了修改原来的代码没有第二种途径。
    3.实现
    静态内部类
        SingletonHolder是一个静态内部类，当外部类IdGenerator加载的时候，SingletonHolder不会被初始化，只有当调用getInstance()时，SingletonHolder才会被加载，
        这个时候才会创建instance。instance的唯一性、创建过程的线程安全性都由jvm来保证。

        public class IdGenerator{
            private AtomicLong id = new AtomicLong(0);
            private IdGenerator(){}

            private static class SingletonHolder {
                private static final IdGenerator instance = new IdGenerator();
            }

            public static IdGenerator getInstance (){
                return SingletonHolder.instance;
            }

            public long getId(){
                return id.incrementAndGet();
            }
        }

    4.单例模式的问题
    （1）对OOP特性的支持不友好
        一旦将类设计成单例，也就是放弃了继承和多态这两个特性，损失了应对未来需求变化的扩展性。
    （2）单例会隐藏类之间的依赖关系
        单例类不显示创建、不依赖参数传递，直接在函数中调用。
    （3）单例对代码的扩展性不友好
    （4）单例对代码的可测试性不友好
    （5）单例不支持有参数的构造函数

    5.如何理解单例模式中的唯一性
        单例模式创建的对象是进程唯一的。进程间是不共享地址空间的，如果在一个进程中创建另一个进程，操作系统会给进程分配一个新的地址空间，并且将老的地址空间的所有内容，
    重新拷贝一份到新进程的地址空间中，这些内容包括代码，数据。所以单例类在老进程中存在且只能存在一个对象，在新进程中也存在且只存在一个对象，这两个对象不是同一个对象，
    也就是说单例类中的唯一性的作用范围是进程内的，在进程中保持唯一性。

    6.如何实现线程唯一的单例
    public class IdGenerator {
        private AtomicLong id = new AtomicLong(0);
        private static final ConcurrentHashMap<Long, IdGenerator> instances = new ConcurrentHashMap<>();

        private IdGenerator(){}

        public static IdGenerator getInstance(){
            Long currentThreadId = Thread.currentThread().getId();
            instances.putIfAbsent(currentThreadId, new IdGenerator());
            return instances.get(currentThreadId);
        }

        public long getId(){
            return id.incrementAndGet();
        }
    }

        

//Python
    class Singleton(object):
        def __new__(cls, *args, **kw):
            if not hasattr(cls, '_instance'):
                orig = super(Singleton, cls)
                cls._instance = orig.__new__(cls, *args, **kw)
            return cls._instance

    class Bus(Singleton):
        lock = threading.RLock()
        def sendData(self, data):
            self.lock.acquire()
            time.sleep(3)
            print 'Sending Singal Data...', data
            self.lock.release()
    
    class VisitEntity(threading.Thread):
        my_bus = ''
        name = ''
        def getName(self):
            return self.name
        def setName(self):
            self.name = name
        def run(self):
            self.my_bus = Bus()
            self.my_bus.sendData(self.name)
        
    if __name__ == '__main__':
        for i in range(3):
            print 'Entity %d begin to run ...' %i
            my_entity = VisitEntity()
            my_entity.setName('Entity_' + str(i))
            my_entity.start()


    class Lazy_property:
        def __init__(self, function):
            self.function = function
            functools.update_wrapper(self, function)
            
        def __get__(self, obj, type_):
            if obj is None:
                return self
            val = self.function(obj)
            obj.__dict__[self.function.__name__] = val
            return val
        
    def lazy_property2(fn):
        attr = '__lazy__' + fn.__name__

        @property
        def _lazy_property(self):
            if not hasattr(self, attr):
                setattr(self, attr, fn(self))
            return getattr(self, attr)
        return _lazy_property

    class Person:
        def __init__(self, name, occupation):
            self.name = name
            self.occupation = occupation
            self.call_count2 = 0

        @lazy_property
        def relatives(self):
            relatives = 'Many relatives.'
            return relatives

        @lazy_property2
        def parents(self):
            self.call_count2 += 1
            return 'father and mother'
        
