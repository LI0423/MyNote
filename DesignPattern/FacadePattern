外观模式
    1.定义
        通过为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节。
    2.优缺点
    （1）优点：
        降低子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。
        对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。
    （2）缺点：
        不能很好的限制客户使用子系统类，容易带来未知风险。
    3.结构
    （1）外观角色：为多个子系统提供一个共同的接口。
    （2）子系统角色：实习系统的部分功能，客户可以通过外观角色访问它。
    （2）客户角色：通过一个外观角色访问各个子系统的功能。
    4.实现
    //子系统角色
    public class AudioPlayer {
        public void play(){
            System.out.println("playing audio...");
        }
    }
    //子系统角色
    public class VideoPlayer {
        public void pley(){
            System.out.println("playing video...");
        }
    }
    //外观角色
    public class MultimediaPlayerFacade {
        private AudioPlayer audioPlayer;
        private VideoPlayer videoPlayer;

        public MultimediaPlayerFacade(){
            this.audioPlayer = new audioPlayer();
            this.videoPlayer = new videoPlayer();
        }

        public void playAudio(){
            audioPlayer.play();
        }

        public void playVideo(){
            videoPlayer.play();
        }
    }
    public class FacadePattern {
        public static void main(String[] args) {
            MultimediaPlayerFacade facade = new MultimediaPlayerFacade();
            //播放音频
            facade.playAudio();
            //播放视频
            facade.playVideo();
        }
    }
    5.应用场景
    （1）解决易用性问题
        封装系统的低层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。
    （2）解决性能问题
        通过将多个接口调用替换为一个门面接口调用，减少网络通信成本，提高APP客户端的响应速度。
    （3）解决分布式事务问题
