访问者模式
    1.定义
        将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。
    2.优缺点
    （1）优点：
        扩展性好，能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。
        复用性好，可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。
        灵活性好，将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。
        符合单一职责原则，访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。
    （2）缺点：
        增加新的元素类很困难，每增加一个新的元素类，都要在每一个具体访问类中增加相应的具体操作。
        具体元素对访问者公布细节，破坏了对象的封装性。
    3.结构
    （1）抽象访问者：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作，该操作中的参数类型标识破坏了被访问的具体元素。
    （2）具体访问者：实现抽象访问角色中声明的各个访问操作，确定访问者访问一个元素时该做什么。
    （3）抽象元素：声明一个包含接受操作accept()的接口，被接受的访问者对象作为accept()方法的参数。
    （4）具体元素：实现抽象元素角色提供的accept()操作，其方法体通常都是visitor.visit(this)，另外具体元素中可能还包含本身业务逻辑的相关操作。
    （5）对象结构：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由List、Set、Map等聚合类实现。
    4.实现
    //抽象访问者
    interface Visitor {
        void visit(ConcreteElementA element);

        void visit(ConcreteElementB element);
    }

    //具体访问者A
    class ConcreteVisitorA implements Visitor {
        public void visit (ConcreteElementA element){
            System.out.println("具体访问者A访问"+element.operationA());
        }

        public void visit (ConcreteElementB element){
            System.out.println("具体访问者B访问"+element.operationB());
        }
    }

     //具体访问者B
    class ConcreteVisitorB implements Visitor {
        public void visit (ConcreteElementA element){
            System.out.println("具体访问者A访问"+element.operationA());
        }

        public void visit (ConcreteElementB element){
            System.out.println("具体访问者B访问"+element.operationB());
        }
    }

    //抽象元素类
    interface Element {
        void accept(Visitor visitor);
    }

    //具体元素
    class ConcreteElementA implements Element {
        public void accept(Visitor visitor){
            visitor.visit(this);
        }

        public String operationA(){
            return "具体元素A的操作";
        }
    }

    //具体元素
    class ConcreteElementB implements Element {
        public void accept(Visitor visitor){
            visitor.visit(this);
        }

        public String operationB(){
            return "具体元素B的操作";
        }
    }

    //对象结构角色
    class ObjectStructure {
        private List<Element> list = new ArrayList<Element>();

        public void accept(Visitor visitor){
            Iterator<Element> i = list.iterator();
            while(i.hasNext()){
                ((Element)i.next()).accept(visitor);
            }
        }

        public void add(Element element){
            list.add(element);
        }

        public void remove(Element element){
            list.remove(element);
        }
    }

    public class VisitorPattern {
        public static void main(String[] args){
            ObjectStructure os = new ObjectStructure();
            os.add(new ConcreteElementA());
            os.add(new ConcreteElementB());
            Visitor visitor = new ConcreteVisitorA();
            os.accept(visitor);
            System.out.println("-----------");
            visitor = new ConcreteVisitorB();
            os.accept(visitor);
        }
    }

    5.例子🌰：
    public interface Element{
        void accept(Visitor visitor);
    }

    class CustomerGroup{
        private List<Customer> customers = new ArrayList<>();

        void accept(Visitor visitor){
            for(Customer customer : customers){
                customer.accept(visitor);
            }
        }
        
        void addCustomer(Customer customer) {
            customers.add(customer);
        }
    }

    public class Customer implements Element{
        private String name;

        private List<Order> orders = new ArrayList<>();

        Customer(String name){
            this.name = name;
        }

        String getName(){
            return name;
        }

        void addOrder(Order order) {
            orders.add(order);
        }

        public void accept(Visitor visitor){
            visitor.visit(this);
            for(Order order : orders){
                order.accept(visitor);
            }
        }
    }

    public class Order implements Element {
        private String name;
        private List<Item> items = new ArrayList();

        Order(String name){
            this.name = name;
        }

        Order(String name, String itemName) {
            this.name = name;
            this.addItem(new Item(itemName));
        }

        String getName(){
            return name;
        }

        void addItem(Item item) {
            items.add(item);
        }

        public void accept(Visitor visitor) {
            visitor.visit(this);
            for(Item item : items){
                item.accept(visitor);
            }
        }
    }

    public class Item implements Element {
        private String name;
        Item(String name) {
            this.name = name;
        }
        String getName(){
            return name;
        }

        public void accept(Visitor visitor){
            visitor.visit(this);
        }
    }

    public interface Visitor {
        void visit(Customer customer);

        void visit(Order order);

        void visit(Item item);
    }

    public class GeneralReport implements Visitor {
        private int customerNo;
        private int orderNo;
        private int itemsNo;

        public void visit(Customer customer) {
            System.out.println(customer.getName());
            customerNo++;
        }

        public void visit(Order order) {
            System.out.println(order.getName());
            orderNo++;
        }

        public void visit(Item item) {
            System.out.println(item.getName());
            itemsNo++;
        }

        public void displayResults() {
            System.out.println("Number of customers: " + customerNo);
            System.out.println("Number of orders: " + orderNo);
            System.out.println("Number of items: " + itemsNo);
        }
    }

    public class Client{
        public static void main() {
            Customer customer1 = new Customer("customer1");
            customer1.addOrder(new Order("order1", "item1"));
            customer1.addOrder(new Order("order2", "item1"));
            customer1.addOrder(new Order("order3", "item1"));

            Order order = new Order("order_a");
            order.addItem(new Item("item_a1"));
            order.addItem(new Item("item_a2"));
            order.addItem(new Item("item_a3"));
            Customer customer2 = new Customer("customer2");
            customer2.addOrder(order);

            CustomerGroup customers = new CustomerGroup();
            customers.addCustomer(customer1);
            customers.addCustomer(customer2);

            GeneralReport visitor = new GeneralReport();
            customer.accept(visitor);
            visitor.displayResults();
        }
    }