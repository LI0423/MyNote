备忘录模式
    1.定义
        在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。
    2.优缺点
    （1）优点：
        提供了一种可以恢复状态的机制，当用户需要时能比较方便的将数据恢复到某个历史状态。
        实现了内部状态的封装，除了创建它的发起人之外，其他对象都不能够访问这些状态信息。
        简化了发起人类，发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理。
    （2）缺点：
        资源消耗大，如果要保存的内部状态信息过多或者频繁，将会占用比较大的内存资源。
    3.结构
    （1）发起人：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务，可以访问备忘录里的所有信息。
    （2）备忘录：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。
    （3）管理者：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。
    4.实现
    //备忘录
    class Memento {
        private String state;

        public Memento(String state){
            this.state = state;
        }

        public void setState(String state){
            this.state = state;
        }

        public String getState(){
            return state;
        }
    }

    //发起人
    class Originator {
        private String state;

        public void setState(String state){
            this.state = state;
        }

        public String getState(){
            return state;
        }

        public Memento createMemento(){
            return new Memento(state);
        }

        public void restoreMemento(Memento m){
            this.setState(m.getState());
        }
    }

    //管理者
    class Caretaker {
        private Memento memento;

        public void setMemento(){
            memento = m;
        }

        public Memento getMemento(){
            return memento;
        }
    }

    public class MementoPattern {
        public static void main(String[] args){
            Originator or = new Originator();
            Caretaker cr = new Caretaker();
            or.setState("S0");
            System.out.println("初始状态："+or.getState());
            or.setState("S1");
            System.out.println("新的状态："+ or.getState());
            or.restoreMemento(cr.getMemento());
            System.out.println("恢复状态："+ or.getState());
        }
    }