责任链模式
    1.定义
        为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连城一条链，当有请求发生时，
        可将请求沿着这条链传递，直到有对象处理它为止。
    2.优缺点
    （1）优点：
        降低了对象之间的耦合度，使得一个对象无须直到到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。
        增加系统的可扩展性。
        增强了贵对象指派职责的灵活性，当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序。
        简化了对象之间的连接。
        每个类只需要处理自己该处理的工作。
    （2）缺点：
        不能保证每个请求一定被处理。
    3.结构
    （1）抽象处理者：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。
    （2）具体处理者：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将请求转给它的后继者。
    （3）客户类：创建处理链，并向链头的具体处理者对象提交请求，不关心处理细节和请求的传递过程。
    4.实现
    //抽象处理者
    abstract class Handler{
        private Handler next;

        public void setNext(Handler next){
            this.next = next;
        }

        public Handler getNext(){
            return next;
        }

        //处理请求的方法
        public abstract void handleRequest(String request);
    }

    class ConcreteHandler1 extends Handler{
        public void handleRequest(String request){
            if(request.equals("one")){
                System.out.println("具体处理者1负责处理该请求");
            }else{
                if(getNext() != null){
                    getNext().handleRequest(request);
                }else{
                    System.out.println("没有人处理该请求");
                }
            }
        }
    }

    class ConcreteHandler2 extends Handler{
        public void handleRequest(String request){
            if(request.equals("two")){
                System.out.println("具体处理者2负责处理该请求");
            }else{
                if(getNext() != null){
                    getNext().handleRequest(request);
                }else{
                    System.out.println("没有人处理该请求");
                }
            }
        }
    }

    public class ChainOfResponsibilityPattern {
        public static void main(String[] args) {
            //组装责任链
            Handler handler1 = new ConcreteHandler1();
            Handler handler2 = new ConcreteHandler2();
            handler1.setNext(handler2);
            //提交请求
            handler1.handleRequest("two");
        }
    }

具体实现例子：

    //创建抽象处理类Handler，定义处理请求的方法和下一个处理器的引用。
    public abstract class Handler {
        protected Handler successor;
        public void setSuccessor(Handler successor){
            this.successor = successor;
        }
        public abstract void handleRequest(int request);
    }

    //实现抽象处理器类，创建具体处理器类PositiveHandler、ZeroHandler和NegativeHandler，并在其中实现处理请求的方法。
    public class PositiveHandler extends Handler {
        public void handleRequest(int request) {
            if (request > 0) {
                System.out.println("PositiveHandler: " + request);
            } else {
                successor.handleRequest(request);
            }
        }
    }

    public class ZeroHandler extends Handler {
        public void handleRequest(int request) {
            if (request == 0) {
                System.out.println("ZeroHandler: " + request);
            } else {
                successor.handleRequest(request);
            }
        }
    }

    public class NegativeHandler extends Handler {
        public void handleRequest(int request) {
            if (request < 0) {
                System.out.println("NegativeHandler: " + request);
            } else {
                successor.handleRequest(request);
            }
        }
    }

    public class ChainOfResponsibilityPattern {
        public static void main(String[] args){
            Handler h1 = new PositiveHandler();
            Handler h2 = new ZeroHandler();
            Handler h3 = new NegativeHandler();

            h1.setSuccessor(h2);
            h2.setSuccessor(h3);

            int[] request = {7, 0, -5, 10};
            for(int request: requests) {
                h1.handleRequest(request);
            }
        }
    }


