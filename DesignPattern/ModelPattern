一、模版方法
    1.定义
        定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变算法结构的情况下重新定义该算法的某些特定步骤。
    2.优缺点
    （1）优点：
        把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类扩展。
        在父类中提取了公共的部分代码便于代码复用。
        部分方法是由子类实现的，子类可以通过扩展的方式增加相应的功能。
    （2）缺点：
        对每个不同的实现都需要定义一个子类，导致类的个数增加，系统更加庞大，设计更抽象，间接增加了系统实现的复杂度。
        父类中的抽象方法由子类实现，子类执行的结果会影响父类。
        由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有的子类都要更改。
    3.结构
    （1）抽象模版类：负责给出一个算法的轮廓和骨架。
        模版方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。
        基本方法：
            抽象方法：在抽象类中声明，由具体子类实现。
            具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。
            钩子方法：在抽象类中已经实现，包括由于判断的逻辑方法和需要子类重写的空方法两种。
    （2）具体子类：实现抽象类中所定义的抽象方法和钩子方法。
    4.实现
    //抽象类
    abstract class AbstractClass{
        //模版方法
        public void TemplateMethod(){
            SpecificMethod();
            abstractMethod1();
            abstractMethod2();
        }

        //具体方法
        public void SpecificMethod(){
            System,out.println("抽象类中的具体方法被调用");
        }

        //抽象方法1
        public abstract void abstractMethod1();

        //抽象方法2
        public abstract void abstractMethod2();
    }

    class ConcreteClass extends AbstractClass{
        public void abstractMethod1(){
            System.out.println("抽象方法1的实现被调用");
        }

        public void abstractMethod2(){
            System.out.println("抽象方法2的实现被调用");
        }
    }

    class ConcreteClass2 {
        AbstractClass abstractClass = new AbstractClass(){
            @Override
            public void abstractMethod1(){
                System.out.println("抽象方法1的实现");
            }

            @Override
            public void abstractMethod2(){
                System.out.println("抽象方法2的实现");
            }
        };
        
        abstractClass.abstractMethod1();
        abstractClass.abstractMethod2();
    }

二、例子
    public abstract Bank {

        public void service(){
            getNum();
            doWait();
            doService();
            doExit();
        }

        public void getNum(){
            System.out.println("取号中。。。");
        }

        public void doWait(){
            System.out.println("等待中。。。");
        }

        protected abstract void doService();

        public void doExit(){
            System.out.println("离开。。。");
        }

        public static void main(String[] args){
            Bank demo = new Demo();
            demo.service();
        }
    }

    public class people extends Bank{
        @Override
        protected void service(){
            System.out.println("存款中。。。");
        } 
    }

    或者

    public class people {
        Bank bank = new Bank(
            @Override
            protected void doService(){
                System.out.println("存款中。。。");
            }
        )
        bank.service();
    }
