适配器模式
    1.定义
        将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的类能一起工作。
    2.优缺点
    （1）优点：
        客户端通过适配器可以透明地调用目标接口。
        复用了现存的类，不需要修改原有代码而重用现有的适配者类。
        将目标类和适配者类解耦，解决目标类和适配者类接口不一致的问题。
    （2）缺点：
        适配器编写过程需要结合业务场景全面考虑，增加系统的复杂性。
    3.结构
    （1）目标接口：当前业务系统所期待的接口，可以是抽象类或接口。
    （2）适配者类：是被访问和适配的现存组件库中的组件接口。
    （3）适配器类：是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标的格式访问适配者。
    4.实现
    （1）类适配器模式
    //目标接口
    interface Target{
        public void request();
    }

    //适配者接口
    class Adaptee{
        public void specificRequest(){
            System.out.println("适配者中的业务代码被调用");
        }
    }

    //类适配器
    class ClassAdapter extends Adaptee implements Target{
        public void request(){
            specificRequest();
        }
    }

    //客户端代码
    public class ClassAdapterTest{
        public static void main(String[] args){
            System.out.println("类适配器测试");
            Target Target = new ClassAdapter();
            Target.request();
        }
    }
    （2）对象适配器
    class ObjectAdapter implements Target{
        private Adaptee Adaptee;
        public ObjectAdapter(Adaptee abstract){
            this.adaptee = adaptee;
        }
        public void request(){
            adaptee.specificRequest();
        }
    }

    public class ObjectAdapterTest{
        public static void main(String[] args){
            System.out.println("对象适配器测试");
            Adaptee adaptee = new Adaptee();
            Target target = new ObjectAdapter(adaptee);
            target.request();
        }
    }