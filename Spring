一、IOC
1.IOC配置的三种方式
（1）XML配置
    将bean的配置信息配置到.xml文件中，通过spring加载文件创建bean。
    <bean id="userService" class="service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
    </bean>
（2）Java配置
    将类的创建交给JavaConfig类来完成，Spring只负责维护和管理。创建一个配置类，添加@Configuration注解声明为配置类，创建方法并加上@Bean，该方法用于创建实例并返回，
    该实例创建后会交给soring管理。
（3）注解配置
    通过在类上加注解的方式来声明一个类交给Spring管理，spring会自动扫描带有@Component，@Controller，@Service，@Reposity这四个注解的类。

2.依赖注入的三种方式
（1）setter方式
    在XML配置方式中，property都是setter方式注入。本质上是两步，先new UserServiceImpl()创建对象，所以需要默认构造函数，然后调用setUserDao()函数注入userDao的值，
    所以需要setUserDao()函数。
（2）构造函数
    在XML配置方式中，<constructor-arg>是通过构造函数参数注入。
    <bean id="userService" class="service.UserServiceImpl">
        <constructor-arg name="userDao" ref="userDao">
    </bean>
（3）注解注入
    以@Autowired（自动注入）注解为例，修饰符有三个属性：Constructor，byType，byName，默认是byType。
    constructor：通过构造方法进行自动注入，spring会匹配与构造方法参数类型一致的bean进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到
    多个匹配多参数构造方法的bean，Spring就会优先将bean注入到多参数的构造方法中。
    byName：被注入的id名必须与set方法后半截匹配，并且id名称的第一个单词首字母必须小写。
    byType：查找所有的set方法，将符合参数类型的bean注入。
二、AOP
1.相关术语
    连接点（JoinPoint）：表示需要在程序中插入横切关注点的扩展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点。
    切入点（PointCut）：选择一组相关连接点的模式，即可以认为连接点的集合，Spring默认使用AspectJ语法。
    通知（Advice）：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（Before Advice）、后置通知（After Advice）、
        环绕通知（Around）、异常通知（After-throwing）、返回通知（After-returning），在spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知。
    切面（Aspect）：横切关注点的模块化，可以认为是通知、引入和切入点的组合，在spring中可以使用Schema和@AspectJ方式进行组织实现。
    引入（inter-type）：也称内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口到所有被代理对象。
    目标对象（Target Object）：需要被织入横切关注点的对象，，由于spring AOP通过代理模式实现，而这个对象永远是被代理对象。
    织入（Weaving）：把切面连接到其他的应用程序类型或者对象上，并创建一个被通知的对象。可以在编译时，类加载时和运行时完成。spring在运行时完成织入。
    AOP代理（AOP Proxy）：AOP框架使用代理模式创建对象，从而实现在连接点处插入通知，在spring中AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。

2.AOP配置方式
（1）XML Schema配置方式
（2）AspectJ注解方式

3.@Transaction实现原理
    通过aop的方式进行管理，实现事务开启、提交或者回滚操作。