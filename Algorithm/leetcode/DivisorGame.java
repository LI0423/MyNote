package Algorithm.leetcode;

//1025. 除数博弈

// 爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
// 最初，黑板上有一个数字 n 。在每个玩家的回合，玩家需要执行以下操作：
// 选出任一 x，满足 0 < x < n 且 n % x == 0 。
// 用 n - x 替换黑板上的数字 n 。
// 如果玩家无法执行这些操作，就会输掉游戏。
// 只有在爱丽丝在游戏中取得胜利时才返回 true 。假设两个玩家都以最佳状态参与游戏。

// 示例 1：

// 输入：n = 2
// 输出：true
// 解释：爱丽丝选择 1，鲍勃无法进行操作。
// 示例 2：

// 输入：n = 3
// 输出：false
// 解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。

public class DivisorGame {

    //博弈类的问题常常让我们摸不着头脑。当我们没有解题思路的时候，不妨试着写几项试试：
    //n=1 的时候，区间 (0,1) 中没有整数是 n 的因数，所以此时 Alice 败。
    //n=2 的时候，Alice 只能拿 1，n 变成 1，Bob 无法继续操作，故 Alice 胜。
    //n=3 的时候，Alice 只能拿 1，n 变成 2，根据 n=2 的结论，我们知道此时 Bob 会获胜，Alice 败。
    //n=4 的时候，Alice 能拿 1 或 2，如果 Alice 拿 1，根据 n=3 的结论，Bob 会失败，Alice 会获胜。
    //n=5 的时候，Alice 只能拿 1，根据 n=4 的结论，Alice 会失败。
    //......
    //发现这样一个现象：n 为奇数的时候 Alice（先手）必败，n 为偶数的时候 Alice 必胜。
    public boolean divisorGame(int n){
        return n % 2 == 0;
    }

    //在「方法一」中，我们写出了前面几项的答案，在这个过程中我们发现，Alice 处在 n=k 的状态时，他（她）做一步操作，必然使得 Bob 处于 n=m(m<k) 的状态。
    //因此我们只要看是否存在一个 m 是必败的状态，那么 Alice 直接执行对应的操作让当前的数字变成 m，Alice 就必胜了，如果没有任何一个是必败的状态的话，
    //说明 Alice 无论怎么进行操作，最后都会让 Bob 处于必胜的状态，此时 Alice 是必败的。
    //结合以上我们定义 f[i] 表示当前数字 i 的时候先手是处于必胜态还是必败态，true 表示先手必胜，false 表示先手必败，从前往后递推，根据我们上文的分析，
    //枚举 i 在 (0,i) 中 i 的因数 j，看是否存在 f[i−j] 为必败态即可。
    public boolean divisorGame2(int n){
        boolean[] f = new boolean[n + 5];
        f[1] = false;
        f[2] = true;
        for (int i = 3; i <= n; ++i) {
            for (int j = 1; j < i; ++j) {
                if ((i % j) == 0 && !f[i - j]) {
                    f[i] = true;
                    break;
                }
            }
        }
        return f[n];
    }
    
}
