package Golang

//func getSequence() func() int {
//	i := 0
//	return func() int {
//		i += 1
//		return i
//	}
//}

//type Circle struct {
//	radius float64
//}
//func (c Circle) getArea() float64 {
//	return 3.14 * c.radius * c.radius
//}

//func getAverage(arr [5]int, size int) float32 {
//	var i, sum int
//	var avg float32

//for i = 0; i < size; i++ {
//	sum += arr[i]
//}

//avg = float32(sum) / float32(size)
//return avg
//}

//const MAX int = 3

//type Books struct {
//	title   string
//	author  string
//	subject string
//	book_id int
//}

func main() {

	//var c1 Circle
	//c1.radius = 10.00
	//fmt.Println("圆的面积= ", c1.getArea())

	//nextNumber := getSequence()
	//fmt.Println(nextNumber())
	//fmt.Println(nextNumber())
	//fmt.Println(nextNumber())
	//nextNumber1 := getSequence()
	//fmt.Println(nextNumber())
	//fmt.Println(nextNumber1())

	//var a int = 100
	//var b int = 200
	//var ret int
	//ret = max(a, b)
	//fmt.Printf("最大值是：%d\n", ret)
	//c, d := swap("Google", "Baidu")
	//fmt.Println(c, d)

	//var i, j, k int
	//balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0}
	//for i = 0; i < 5; i++ {
	//	fmt.Printf("balance[%d] = %f\n", i, balance[i])
	//}
	//balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0}
	//for j = 0; j < 5; j++ {
	//	fmt.Printf("balance2[%d] = %f\n", j, balance2[j])
	//}
	//将索引为1和3的元素初始化
	//balance3 := [5]float32{1: 2.0, 3: 7.0}
	//for k = 0; k < 5; k++ {
	//	fmt.Printf("balance3[%d] = %f\n", k, balance3[k])
	//}

	//values := [][]int{}
	//row1 := []int{1, 2, 3}
	//row2 := []int{4, 5, 6}
	//values = append(values, row1)
	//values = append(values, row2)
	//fmt.Println("row 1")
	//fmt.Println(values[0])
	//fmt.Println("row 2")
	//fmt.Println(values[1])
	//fmt.Println("第一个元素为：")
	//fmt.Println(values[0][0])

	//a := [3][4]int{
	//	{0, 1, 2, 3},
	//	{4, 5, 6, 7},
	//	{8, 9, 10, 11}}
	//var i, j int
	//for i = 0; i < 3; i++ {
	//	for j = 0; j < 4; j++ {
	//		fmt.Printf("a[%d][%d] = %d\n", i, j, a[i][j])
	//	}
	//}

	//animals := [][]string{}
	//row1 := []string{"fish", "shark", "eel"}
	//row2 := []string{"bird"}
	//row3 := []string{"lizard", "salamander"}
	//animals = append(animals, row1)
	//animals = append(animals, row2)
	//animals = append(animals, row3)

	//for i := range animals {
	//	fmt.Printf("Row: %v\n", i)
	//	fmt.Println(animals[i])
	//}
	//var balance = [5]int{1000, 2, 3, 17, 50}
	//var avg float32
	//avg = getAverage(balance, len(balance))
	//fmt.Printf("平均值为：%f", avg)

	//var a = 20
	//var ip *int
	//ip = &a
	//fmt.Printf("a变量的地址是：%x\n", &a)
	//fmt.Printf("ip 变量储存的指针地址：%x\n", ip)
	//fmt.Printf("*ip 变量的值：%d\n", *ip)

	//a := []int{10, 100, 200}
	//var i int
	//var ptr [MAX]*int
	//for i = 0; i < MAX; i++ {
	//	ptr[i] = &a[i]
	//}
	//for i = 0; i < MAX; i++ {
	//	fmt.Printf("a[%d] = %d\n", i, *ptr[i])
	//}

	//var a int
	//var ptr *int
	//var pptr **int
	//a = 3000
	//ptr = &a
	//pptr = &ptr
	//fmt.Printf("变量 a = %d\n", a)
	//fmt.Printf("指针变量 *ptr = %d\n", *ptr)
	//fmt.Printf("指向指针的指针变量 **pptr = %d\n", **pptr)

	//var a = 100
	//var b = 200
	//fmt.Printf("交换前 a 的值：%d\n", a)
	//fmt.Printf("交换前 b 的值：%d\n", b)
	//swap(&a, &b)
	//fmt.Printf("交换后 a 的值：%d\n", a)
	//fmt.Printf("交换后 b 的值：%d\n", b)

	//fmt.Println(Books{"Go", "www.go.com", "go教程", 123456})
	//fmt.Println(Books{title: "Go语言", author: "www.go.com", subject: "Go语言教程", book_id: 123456})
	//fmt.Println(Books{title: "Go语言", author: "www.go.com"})

	//var Book1 Books
	//var Book2 Books
	//Book1.title = "Go语言"
	//Book1.author = "www.go.com"
	//Book1.subject = "Go语言教程"
	//Book1.book_id = 123456
	//Book2.title = "Python教程"
	//Book2.author = "www.python.com"
	//Book2.subject = "Python语言教程"
	//Book2.book_id = 654321
	//fmt.Printf("Book 1 title : %s\n", Book1.title)
	//fmt.Printf("Book 1 author : %s\n", Book1.author)
	//fmt.Printf("Book 1 subject : %s\n", Book1.subject)
	//fmt.Printf("Book 1 book_id : %d\n", Book1.book_id)
	//fmt.Printf("Book 2 title : %s\n", Book2.title)
	//fmt.Printf("Book 2 author : %s\n", Book2.author)
	//fmt.Printf("Book 2 subject : %s\n", Book2.subject)
	//fmt.Printf("Book 2 book_id : %d\n", Book2.book_id)

	//map1 := make(map[int]float32)
	//map1[1] = 1.0
	//map1[2] = 2.0
	//map1[3] = 3.0
	//map1[4] = 4.0
	//for key, value := range map1 {
	//	fmt.Printf("key is: %d - value is: %f\n", key, value)
	//}
	//for key := range map1 {
	//	fmt.Printf("key is: %d\n", key)
	//}
	//for _, value := range map1 {
	//	fmt.Printf("value is %f\n", value)
	//}

	//nums := []int{2, 3, 4}
	//sum := 0
	//for _, num := range nums {
	//	sum += num
	//}
	//fmt.Println("sum:", sum)
	//for i, num := range nums {
	//	if num == 3 {
	//		fmt.Println("index:", i)
	//	}
	//}
	//kvs := map[string]string{"a": "apple", "b": "banana"}
	//for k, v := range kvs {
	//	fmt.Printf("%s -> %s\n", k, v)
	//}
	//for i, c := range "go" {
	//	fmt.Println(i, c)
	//}

	//i := 15
	//fmt.Printf("%d 的阶乘是 %d\n", i, Factorial(uint64(i)))

	//var i int
	//for i = 0; i < 10; i++ {
	//	fmt.Printf("%d\t", fibonacci(i))
	//}

	//sum := 17
	//count := 5
	//var mean float32
	//mean = float32(sum) / float32(count)
	//fmt.Printf("mean的值为：%f\n", mean)

	//nums1 := []int{1, 2, 3, 0, 0, 0}
	//m := 3
	//nums2 := []int{2, 5, 6}
	//n := 3
	//ints := merge(nums1, m, nums2, n)
	//fmt.Println(ints)

	nums := []int{2, 2, 1}
	mapTest(nums)

}

//func fibonacci(n int) int {
//	if n < 2 {
//		return n
//	}
//	return fibonacci(n-2) + fibonacci(n-1)
//}

//func Factorial(n uint64) (result uint64) {
//	if n > 0 {
//		result = n * Factorial(n-1)
//		return result
//	}
//	return 1
//}

//func swap(x *int, y *int) {
//	var temp int
//	temp = *x
//	*x = *y
//	*y = temp
//}

//func max(num1, num2 int) int {
//	var result int
//	if num1 > num2 {
//		result = num1
//	} else {
//		result = num2
//	}
//	return result
//}

//func swap(x, y string) (string, string) {
//	return y, x
//}

func canBeIncreasing(nums []int) bool {
	count := 0
	indexNum := nums[0]
	for i := 1; i < len(nums); i++ {
		if indexNum < nums[i] {
			count += 1
		}
		indexNum = nums[i]
	}
	if count > 1 {
		return false
	} else {
		return true
	}
}

func plusOne(digits []int) []int {
	for i := len(digits) - 1; i >= 1; i-- {
		digits[i]++
		digits[i] = digits[i] % 10
		if digits[i] != 0 {
			return digits
		}
	}
	length := len(digits) + 1
	digits = make([]int, length)
	digits[0] = 1
	return digits
}

func merge(nums1 []int, m int, nums2 []int, n int) []int {
	sorted := make([]int, 0, m+n)
	p1, p2 := 0, 0
	for {
		if p1 == m {
			sorted = append(sorted, nums2[p2:]...)
			break
		}
		if p2 == n {
			sorted = append(sorted, nums1[p1:]...)
			break
		}
		if nums1[p1] < nums2[p2] {
			sorted = append(sorted, nums1[p1])
			p1++
		} else {
			sorted = append(sorted, nums2[p2])
			p2++
		}
	}
	copy(nums1, sorted)
	return nums1
}

func mapTest(nums []int) int {
	tmpMap := map[int]int{}
	for i := range nums {
		count := tmpMap[nums[i]]
		if count == 0 {
			count = 1
		} else {
			count++
		}
		tmpMap[nums[i]] = count
	}
	for k, v := range tmpMap {
		if v == 1 {
			return k
		}
	}
	return -1
}
