1、概述
    一种高性能的内存数据库，专为处理大规模并发和极低延迟的需求而设计。
2、与其他内存数据库的对比
    Redis：采用单线程架构，在处理大量并发时可能无法充分利用多核处理器。虽然在轻量级任务中表现出色，但在极端高负载的情况下，其单线程瓶颈可能限制
        性能的进一步提升。
    Memcached：一种轻量级的缓存解决方案，主要用于键值对，并且比Redis更简洁，但数据结构简单，功能有限。
    Dragonfly：与Redis和Memcached不同，Dragonfly采用多线程模型，能够充分利用多核CPU的计算能力，提升并发的效率。并且优化了内存管理，减少了
        内存碎片提升了内存利用率。
3、架构设计
（1）多线程处理模型
（2）锁分离机制：通过将全局锁划分为更小的局部锁，减少线程间的竞争，提升系统并发度，保证在高负载下的稳定性和吞吐量。
（3）优化内存管理
（4）持久化机制：类似于Redis的持久化方案，RDB快照和AOF日志，保证数据的持久型和可靠性。
4、锁分离机制
    在处理多个客户端请求时，减少对全局锁的依赖，通过将锁的粒度细化，使得更多的请求可以并发执行，而不是阻塞等待其他线程释放锁。
（1）局部锁替代全局锁
    在Redis的单线程模型中，所有的操作都依赖于全局锁，确保每个请求依次执行。DragonflyDB通过锁分离机制，将全局锁划分为多个局部锁。每个数据结构或
    操作可能只涉及到某个部分的数据，DragonflyDB会在这些数据上应用局部锁，而不是阻塞整个数据库的操作。可以让不同的线程同时处理不冲突的请求，提升并发能力。
（2）细粒度锁
    Dragonfly在具体数据操作时，会根据数据访问的粒度选择不同的锁策略。
（3）读写锁分离
    DragonflyDB实现了读写锁分离，即对数据的读取操作不会影响其他线程的写操作，反之亦然。尤其在读操作远多于写操作的情况下，可以显著减少锁竞争和等待时间。
5、性能优化
（1）对象池与内存复用
    Dragonfly使用了对象池技术，减少频繁的内存分配和释放。对象池允许在内存中保留已经使用过的对象，当需要新的对象时优先从对象池中获取，而不是频繁地向
    操作系统请求内存。减少了内存分配和回收的开销，也降低了内存碎片的问题。
（2）按需内存分配
    Dragonfly根据数据类型和实际需要进行动态分配内存，避免一次性分配过多内存。对于小对象和大对象，分别采取不同的内存管理策略，减少不必要的内存浪费。
（3）高效缓存机制
    支持常用的数据缓存策略，如LRU等，用于管理内存中最常访问的数据。
6、异步IO操作
（1）非阻塞IO
    在传统的阻塞IO模型中，系统在执行IO操作时会等待操作完成，会导致CPU资源闲置。DragonflyDB的异步IO操作可以让IO任务在后台执行，线程不必等待数据读写完成，
    继续处理其他任务。这种机制极大地提升了系统的响应速度。
（2）事件驱动模型
    每当有IO事件发生时，系统会触发相应的事件处理程序，减少了CPU资源的浪费。
（3）减少IO等待时间
7、