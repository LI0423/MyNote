1.固定窗口算法
    把时间划分为固定的时间窗口，每个窗口内允许的请求次数设置限制。如果在一个时间窗口内，请求次数超过了上限，就会触发限流。
    固定窗口算法实现简单，占用空间小，但是存在临界问题，由于窗口的切换是瞬间完成的，所以请求的处理不够平滑，可能会在切换的瞬间出现流量的剧烈波动。
    public class FixedWindowRateLimiter{
        public static final String KEY = "fixedWindowRateLimiter: ";

        // 请求限制数量
        private Long limit;

        // 窗口大小
        private Long windowSize;

        public FixedWindowRateLimiter(Long limit, Long windowSize) {
            this.limit = limit;
            this.windowSize = windowSize;
        }

        // 固定窗口限流
        public boolean triggerLimit(String path) {
            RedissonClient redis = RedissonConfig.getInstance();
            // 加分布式锁，防止并发情况下窗口初始化时间不一致问题
            RLock rLock = redis.getLock(KEY + "LOCK: " + path);
            try {
                rLock.lock(100, TimeUnit.MILLISECONDS);
                String redisKey = KEY + path;
                RAtomicLong counter = redis.getAtomicLong(redisKey);
                // 计数
                long count = counter.incrementAndGet();
                // 如果为1的话，就说明窗口刚初始化
                if (count == 1){
                    // 直接设置过期时间，作为窗口
                    counter.expire(windowSize, TimeUnit.SECONDS);
                }
                // 触发限流
                if (count > limit){
                    // 触发限流的不记在请求数量中
                    counter.decrementAndGet();
                    return true;
                }
                return false;
            } finally{
                rLock.unLock();
            }
        }
    }

    public class FixedWindowRateLimiter {
        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(20, 50, 10, TimeUnit.SECONDS, new LinkedBlockingDeque<>(10));

        @Test
        @DisplayName("1min限制10次请求固定窗口测试")
        void triggerLimit() throws InterruptedExcepiton{
            FixedWindowRateLimiter fixedWindowRateLimiter = new FixedWindowRateLimiter(10L, 60L);
            // 模拟不同窗口内的调用
            for (int i = 0; i < 3; i++){
                CountDownLatch countDownLatch = new CountDownLatch(20);
                // 20个线程并发调用
                for (int j = 0; j < 20; j++){
                    threadPoolExecutor.execute(() -> {
                        boolean isLimit = fixedWindowRateLimiter.triggerLimit("/test");
                        System.out.println(isLimit);
                        countDownLatch.countDown();
                    })
                }
                countDownLatch.await();
                // 休眠1min
                TimeUnit.MINUTES.sleep(1);
            }
        }
    }

2.滑动窗口算法
    将一个大的时间窗口划分为多个小的时间窗口，每个小的窗口都有独立的计数。请求过来的时候，判断请求的次数是否超过了整个窗口的限制。
    窗口的移动是每次向前滑动一个小的单元窗口。滑的格子越多，整体的滑动就会越平滑，限流的效果也会越精准。
    public class SlidingWindowRateLimiter {
        public static final String KEY = "slidingWindowRateLimiter: ";
        
        // 请求次数限制
        private Long limit;

        // 窗口大小
        private Long windowSize;

        public SlidingWindowRateLimiter(Long limit, Long windowSize) {
            this.limit = limit;
            this.windowSize = windowSize;
        }

        public boolean triggerLimit(String path) {
            RedissonClient redis = RedissonConfig.getInstance();
            // 窗口计数
            RScoredSortedSet<Long> counter = redis.getScoredSortedSet(KEY + path);
            // 使用分布式锁，避免并发设置初始值的时候，导致窗口计数被覆盖
            RLock rLock = redis.getLock(KEY + "LOCK: " + path);
            try {
                rLock.lock(200, TimeUnit.MILLISECONDS);
                // 当前时间戳
                long currentTimestamp = System.currentTimeMillis();
                // 窗口起始时间戳
                long windowStartTimestamp = currentTimestamp - windowSize * 1000;
                // 移除窗口外的时间戳，左闭右开
                counter.removeRangeByScore(0, true, windowStartTimestamp, false);
                // 将当前时间戳作为score，也作为member
                counter.add(currentTimestamp, currentTimestamp);
                // 使用zset的元素个数，作为请求计数
                long count = counter.size();
                // 判断时间戳数量是否超过限流阈值
                if (count > limit) {
                    System.out.println("[triggerLimit] path: " + path + " count: " + count + " over limit: " + limit);
                    return true;
                }
                return false;
            } finally {
                rLock.unLock();
            }
        }
    }

3.漏桶算法
    请求就像水一样以任意速度注入漏桶，而桶会按照固定的速率将水漏掉。当进水速率大于出水速率的时候，漏桶会变满，此时新进入的请求将会被丢弃。
    public class LeakyBucketRateLimiter {
        private RedissonClient redis = RedissonConfig.getInstance();
        private static final String KEY_PREFIX = "LeakyBucket: ";

        // 桶的大小
        private Long bucketSize;

        // 漏水速率
        private Long leakRate;

        public LeakyBucketRateLimiter(Long bucketSize, Long leakRate) {
            this.bucketSize = bucketSize;
            this.leakRate = leakRate;
            // 这里启动一个定时任务，每s执行一次
            ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);
            executorService.scheduledAtFixedRate(this::leakWater, 0, 1, TimeUnit.SECONDS);
        }

        // 漏水
        public void leakWater(){
            RSet<String> pathSet = redis.getSet(KEY_PREFIX + ": pathSet");
            // 遍历所有path，删除旧请求
            for(String path : pathSet){
                String redisKey = KEY_PREFIX + path;
                RScoredSortedSet<Long> bucket = redis.getScoredSortedSet(KEY_PREFIX + path);
                // 获取当前时间
                long now = System.currentTimeMillis();
                // 删除旧的请求
                bucket.removeRangeByScore(0, true, now - 1000 * leakRate, true);
            }
        }

        // 限流
        public boolean triggerLimit(String path) {
            // 加锁，防止并发初始化问题
            RLock rLock = redis.getLock(KEY_PREFIX + "LOCK: " + path);
            try {
                rLock.lock(100, TimeUnit.MILLISECONDS);
                String redisKey = KEY_PREFIX + path;
                RScoredSortedSet<Long> bucket = redis.getScoredSortedSet(redisKey);
                // 这里用一个set，来存储所有path
                RSet<String> pathSet = redis.getSet(KEY_PREFIX + ": pathSet");
                pathSet.add(path);
                // 获取当前时间
                long now = System.currentTimeMillis();
                // 检查桶是否已满
                if (bucket.size() < bucketSize) {
                    // 桶未满，添加一个元素到桶中
                    bucket.add(now, now);
                    return false;
                }
                // 桶已满，触发限流
                System.out.println("[triggerLimit] path: " + path + " bucket size: " + bucket.size());
                return true;
            } finally {
                rLock.unLock();
            }
        }
    }

4.令牌桶算法
    系统以一种固定的速率向桶中添加令牌，每个请求在发送前都需要从桶中取出一个令牌，只有取到令牌的请求才被通过。
    public class TokenBucketRateLimiter {
        // 阈值
        private Long limit;

        // 添加令牌的速率
        private Long tokenRate;

        public TokenBucketRateLimiter(Long limit, Long tokenRate) {
            this.limit = limit;
            this.tokenRate = tokenRate;
        }

        // 限流算法
        public boolean triggerLimit(String path) {
            RedissonClient redis = RedissonConfig.getInstance();
            RRateLimiter rateLimiter = redis.getRateLimiter(KEY + path);
            // 初始化，设置速率模式，速率，间隔，间隔单位
            rateLimiter.trySetRate(RateType.OVERALL, limit, tokenRate, RateIntervalUnit.SECONDS);
            // 获取令牌
            return rateLimiter.tryAcquire();
        }

    }