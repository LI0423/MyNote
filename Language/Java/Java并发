一、线程
1、线程和进程
    进程是程序的一次执行过程，是系统运行程序的基本单位，进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。
    线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的堆和方法区资源，但每个线程有
    自己的程序计数器、虚拟机栈和本地方法栈，线程也被称为轻量级进程。
    一个Java程序的运行是main线程和多个其他线程同时运行。
2、线程与进程的关系，区别和优缺点
    一个进程中可以有多个线程，多个线程共享进程的堆和方法区（jdk1.8之后的原空间）资源，但是每个线程有自己的程序计数器、虚拟机栈和本地方法栈。
    线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程有可能会相互影响。线程
    执行开销小，但不利于资源的管理和保护；而进程正相反。
3、程序计数器为什么是私有的
    程序计数器的作用：
        字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。
        在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。如果执行的是native方法，
        那么程序计数器记录的是undefined地址，只有执行的是Java代码时程序计数器记录的才是下一条指令的地址。
    程序计数器是为了线程切换后能恢复到正确的执行位置。
4、虚拟机栈和本地方法栈为什么是私有的
    虚拟机栈：每个Java方法在执行之前会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在
        Java虚拟机栈中入栈和出栈的过程。
    本地方法栈：和虚拟机栈所发挥的作用非常相似，虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。
    为了保证线程中的局部变量不被别的线程访问到，虚拟机栈和本地方法栈是线程私有的。
5、如何创建线程
    一般来说，创建线程有很多方式，例如继承Thread类、实现Runnable类、实现Callable接口、使用线程池、使用CompletableFuture类等。这些方式其实并
    没有真正创建出线程。准确说这些都是在Java代码中使用多线程的方法。Java就只有一种方式可以创建线程，就是通过new Thread().start()创建。不管哪种
    方式，最终还是依赖于new Thread().start()。
6、线程的生命周期和状态
    Java线程在运行的生命周期中的指定时刻只能处于下面6种不同状态的一个状态：
        NEW：初始状态，线程被创建出来但没有被调用start()。
        RUNNABLE：运行状态，线程被调用了start()等待运行的状态。
        BLOCKED：阻塞状态，需要等待锁释放。
        WAITING：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知和中断）。
        TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像WAITING那样一直等待。
        TERMINATED：终止状态，表示该线程已经运行完毕。
7、什么是线程上下文切换
    线程在执行过程中会有自己的运行条件和状态（也称上下文）。
        主动让出CPU，比如调用了sleep()，wait()等。
        时间片用完，因为操作系统要防止一个线程或者进程长时间占用CPU导致其他线程或者进程饿死。
        调用了阻塞类型的系统中断，比如请求IO，线程被阻塞。
        被终止或结束运行。
    前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用CPU的时候恢复线程。并加载下一个将要占用CPU的上下文。这就是上下文切换。
8、Thread的sleep()方法和Object的wait()方法对比
    共同点：两者都可以暂停线程的执行。
    区别：sleep()方法没有释放锁，而wait()方法释放了锁。
        wait()通常被用于线程间交互/通信，sleep()通常被用于暂停执行。
        wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒，
        或者也可以使用wait(long timeout)超时后线程会自动苏醒。
        sleep()是Thread类的静态本地方法，wait()则是object类的本地方法。
9、为什么wait()方法不定义在Thread中
    wait()是让获得对象锁的线程等待，会自动释放当前线程占有的对象锁。每个对象（object）都拥有对象锁，既然要释放当前线程占有的对象锁并让其进入WAITING状态，
    自然是要操作对应的对象（object）而非当前线程（Thread）。
10、可以直接调用Thread类的run方法
    new一个Thread，线程进入了新建状态。调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就开始运行了。start()会执行线程
    的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。但是直接执行run()方法，会把run()方法当成一个main线程下的普通方法去执行，
    并不会在某个线程中执行它，所以并不是多线程工作。

二、多线程
1、并发与并行的区别
    并发：两个及两个以上的作业在同一时间段内执行。
    并行：两个及两个以上的作业在同一时刻执行。
2、同步和异步的区别
    同步：发出一个调用后，在没有得到结果之前，该调用就不可以返回，一直等待。
    异步：调用在发出之后，不用等待返回结果，该调用直接返回。

三、死锁
1、产生死锁的四个必要条件
    互斥条件：该资源任意一个时刻只由一个线程占用。
    请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。
    不剥夺条件：该线程已获得的资源在为使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。
    循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。
2、如何检测死锁
    使用jmap、jstack等命令查看JVM线程栈和堆内存的情况。如果有死锁，jstack的输出中通常会有Found one Java-level deadlock的字样，后面会
    跟着死锁相关的线程信息。实际项目中还可以搭配使用top、df、free等命令查看操作系统的基本情况，出现死锁可能会导致CPU、内存等资源消耗过高。
3、如何预防线程死锁
    破坏请求与保持条件：一次性申请所有的资源。
    破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放占有的资源。
    破坏循环等待条件：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。

四、volatile关键字
1、如何保证变量的可见性
    volatile关键字可以保证变量的可见性，如果将变量声明为volatile，指示JVM这个变量是共享且不稳定的，每次使用它都到主存中进行读取。
2、如何禁止指令重排序
    volatile关键字除了可以保证变量的可见性，还有一个重要的作用就是防止JVM的指令重排序。如果将变量声明为volatile，在对这个变量进行读写操作的时候，
    会通过插入特定的内存屏障的方式来禁止指令重排序。
    双重检验锁实现对象单例：
        public class Singleton{
            private volatile static Singleton uniqueInstance;
            private Singleton(){}

            public static getInstance(){
                if(uniqueInstance == null){
                    synchronized(Singleton.class){
                        if(uniqueInstance==null){
                            uniqueInstance = new Singleton();
                        }
                    }
                }
                return uniqueInstance;
            }
        }
3、volatile可以保证原子性吗？
    volatile关键字能保证变量的可见性，但不能保证对变量的操作是原子性的。
    public class VolatileAtomicityDemo{
        public volatile static int inc = 0;
        public void increase(){
            inc++;
        }
        public static void main(String[] args) throws InterruptedException{
            ExecutorService threadPool = Executors.newFixedThreadPool(5);
            VolatileAtomicityDemo volatileAtomicityDemo = new VolatileAtomicityDemo();
            for(int i = 0; i < 5; i++){
                threadPool.execute(() -> {
                    for (int j = 0; j < 500; j++){
                        volatileAtomicityDemo.increase();
                    }
                })
            }
            Thread.sleep(1500);
            System.out.println(inc);
            threadPool.shutdown();
        }
    }
    原则上应该输出的最终结果是2500，但实际上并不是2500。因为inc++并不是一个原子操作，inc++其实是一个复合操作，分为三步：读取inc的值；对inc加1；
    将inc的值写回内存。当两个线程对inc进行操作，线程1先读取inc的值，还未对inc进行操作，线程2也读取了inc的值，并将其加1，再将inc的值写回内存。而
    线程1不知道inc的值已经改变，依然对inc的值加1，此时线程1持有的inc的值为2，再将其写回内存。这样两个线程执行了两次，但是inc的值只增加了1。
    使用synchronized改进：
        public synchronized void increase(){
            inc++;
        }
    使用AtomicInteger改进：
        public AtomicInteger inc = new AtomicInteger();
        public void increase(){
            inc.getAndIncrement();
        }
    使用ReentrantLock改进：
        Lock lock = new ReentrantLock();
        public void increase(){
            lock.lock();
            try{
                inc++;
            } finally {
                lock.unlock();
            }
        }

五、乐观锁和悲观锁
1、悲观锁
    悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出问题，所以每次在获取资源的时候都会上锁，这样其他线程拿到这个资源就会阻塞直到锁被
    上一个持有者释放。
    高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。悲观锁还可能存在死锁问题，影响代码运行。
2、乐观锁
    乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出问题，线程可以不停执行，无需加锁也无需等待，只是在提交修改的时候去验证资源是否被
    其他线程修改了。
3、如何实现乐观锁
    版本号机制和CAS算法。
4、版本号机制
    一般是在数据表上加一个数据版本号version字段，表示被修改的次数。当数据被修改时，version会加一。当线程A更新数据值时，在读取数据的同时也会读取
    version值，在提交更新时，如果读取的version值跟当前数据的version值相等才更新，否则重试更新，直到成功。
5、CAS算法
    CAS全称是Compare And Swap（比较交换），用于实现乐观锁，就是用一个预期值和要更新的变量值进行比较，两值相等才会更新。
    CAS涉及三个操作数：
        V：要更新的变量值（Var）
        E：预期值（Expected）
        N：要写入的新值（New）
    当且仅当C的值等于E时，CAS通过原子方式用新值N来更新V的值。如果不等说明有别的线程更新了V，则放弃这次更新。
6、Java如何实现的CAS
    Java中实现CAS操作的一个关键类是Unsafe。Unsafe类位于sun.misc下，是一个提供低级别、不安全操作的类。不推荐在应用程序中使用。
7、CAS算法的问题
（1）ABA问题
    如果一个变量初次读取的时候是A值，并且在准备更新的时候还是A值，这无法说明这个变量没有被更新过。在这段时间中可能被改成了其他值，又改回了A值，
    但是CAS会认为该变量从来没有被修改过。
    如何解决：
        在变量前面追加版本号或者时间戳。AtomicStampedReference类就是用来解决ABA问题的，其中的compareAndSet()方法就是首先检查当前引用是否
        等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则用原子方式将该引用和该标志的值设为给定的更新值。
（2）循环时间长开销大
    CAS操作会用自旋来重试，不成功就一直循环直到成功，长时间不成功会给CPU带来非常大的执行开销。
（3）只能保证一个共享变量的原子操作

六、synchronized关键字
1、synchronized的作用
    主要解决多个线程之间访问资源的同步性，可以保证被修饰的方法或者代码块在任一时刻只能有一个线程执行。
    在Java早期版本中，synchronized属于重量级锁。因为监视器锁是依赖于底层操作系统的Mutex Lock来实现的，Java的线程是映射到操作系统的原生线程上的，
    如果要挂起或者唤醒一个线程都需要操作系统的帮忙，操作系统实现线程之间的切换需要从用户态转换到内核态，这个操作需要比较长的时间。
2、如何使用synchronized
（1）修饰实例方法（锁当前对象实例）
    synchronized void method(){}
（2）修饰静态方法（锁当前类）
    synchronized static void method(){}
    静态synchronized方法和非静态synchronized方法之间的调用互斥吗？
        不互斥，如果一个线程A调用一个实例对象的非静态synchronized方法，而线程B需要调用这个实例对象所属类的静态synchronized方法，不会发生互斥。
        因为访问静态syncrhonized占用的锁是，而访问非静态synchronized方法占用的锁是当前实例对象锁。
（3）修饰代码块（锁指定对象/类）
    synchronized(object){} 表示进入同步代码库前要获得给定对象的锁。
    synchronized(类.class){} 表示进入同步代码前要获得给定Class的锁。
3、synchronized底层原理
（1）synchronized代码块
    synchronized同步语句块的实现使用的是monitorenter和monitorexit指令，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令
    则指向同步代码块的结束位置。
    当执行monitorenter指令时，线程试图获取对象监视器monitor的持有权。在执行monitorenter时会尝试获取对象的锁，如果锁的计数器为0则表示锁可以
    被获取，获取后将锁计数器设为1。对象锁的拥有者线程才可以执行monitorexit指令来释放锁。在执行monitorexit之后，将锁计数器设为0，表明锁被释放，
    其他线程可以尝试获取锁。
（2）synchronized修饰方法
    synchronized使用的是ACC_SYNCHRONIZED标识，该标识指明了该方法是一个同步方法。JVM通过该标志来辨别一个方法是否声明为同步方法，从而执行相应的方法调用。
4、JDK1.6之后的syncrhonized做了哪些优化
    引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。
    锁主要存在四种状态，无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，会随着竞争的激烈逐渐升级。锁不能降级，是为了提高获得锁和释放锁的效率。
5、synchronized和volatile的区别
    volatile关键字是线程同步的轻量级实现。volatile关键字只能用于变量而synchronized关键字可以修饰方法和代码块。
    volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。
    volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。

六、ReentrantLock
1、ReentrantLokc是什么
    ReentrantLock实现了Lock接口，是一个可重入且独占的锁。ReentrantLock里面有一个内部类Sync，Sync继承了AQS（AbstracQueuedSynchronizer），添加锁和释放锁
    的大部分操作实际上都是在Sync中实现的。Sync有公平锁和非公平锁两个子类。默认使用非公平锁，也可以通过构造器显式指定。
2、公平锁和非公平锁的区别
    公平锁：锁被释放后，先申请的线程先得到锁。因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。
    非公平锁：锁被释放后，线程是随机或者按照其他优先级排序的顺序获取锁的。性能更好，但可能导致某些线程永远无法获取锁。
3、synchronized和ReentrantLock的区别
（1）两者都是可重入锁
    可重入锁也叫递归锁，指的是线程可以再次获取自己的内部锁。JDK提供的Lock实现类，都是可重入的。
        public class SynchronizedDemo{
            public synchronized void method1(){
                System.out.println("method1");
                method2();
            }
            public synchronized void method2(){
                System.out.println("method2");
            }
        }
        因为synchronized是可重入的，同一个线程在调用method1的时可以直接获取当前对象的锁，执行method2时可以再次获取该对象的锁，不会产生死锁。
        如果是不可重入的，由于当前对象锁已经持有且无法释放，再执行method2时无法获取锁，出现死锁问题。
（2）synchronized依赖于JVM，ReentrantLock依赖于API
（3）ReentrantLock比synchronized增加了一些高级功能
    等待可中断：通过lock.lockInterruptibly()来实现这个机制。也就是正在等待的锁可以放弃等待锁释放，转而去做别的事情。
    可实现公平锁：ReentrantLock可以指定是公平锁还是非公平锁，而synchronized只能是非公平锁。ReentrantLock默认是非公平锁，可以通过构造方法参数来指定。
    可实现选择性通知：synchronized关键字与wait()和notify()/notifyAll()可以实现等待通知机制。ReentrantLock需要通过Condition接口和
        newCondition()方法。线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度上更加灵活。使用notify()/notifyAll()
        进行唤醒时，线程是由JVM选择的，用ReentrantLock类结合Condition实例可以实现选择性通知。而synchronized相当于整个Lock对象只有一个
        Condition实例，所有的线程都注册在它身上。如果执行notifyAll()将会唤醒所有等待的线程。而Condition实例的signalAll()方法，只会唤醒
        注册在Condition实例中的所有等待线程。
4、可中断锁和不可中断锁的区别
    可中断锁就是在获取锁的过程中可以被打断，不需要一直等待获取锁之后才执行别的逻辑。ReentrantLock就是可中断锁。
    不可中断锁就是一旦申请锁，就只能等待拿到锁以后才能进行别的逻辑处理。synchronized就是不可中断锁。

七、ReentrantReadWriteLock
1、ReentrantReadWirteLock是什么
    ReentrantReadWirteLock实现了ReadWriteLock，是一个可重入的读写锁，既可以保证多个线程同时读的效率。
    一般锁进行并发控制的规则：读读互斥、读写互斥、写写互斥。
    读写锁进行并发控制的规则：读读不互斥、读写互斥、写写互斥。
    ReentrantReadWirteLock其实是两把锁，一把锁是WriteLock（写锁），一把是ReadLock（读锁）。读锁是共享锁，写锁是独占锁。读锁可以被多个线程持有，
    写锁只能同时被一个线程持有。
    底层是基于AQS实现的，也支持公平锁和非公平锁，默认使用非公平锁，可以通过构造器显式指定。
2、ReentrantReadWriteLock适合什么场景
    在读多写少的情况下，使用ReentrantReadWriteLock能明显提升效率。
3、线程持有读锁还能获取写锁
    线程持有读锁的时候，不能再持有写锁。因为再获取写锁的时候，如果发现当前读锁被占用，则会立即获取失败。
    线程持有写锁的时候，该线程还能继续获取读锁。只有写锁没有被当前线程占用才会获取失败。
4、读锁为什么不能升级为写锁
    写锁可以降级为读锁，但是写锁不能升级为写锁。这是因为读锁升级为写锁会引起线程的争夺，写锁属于是独占锁。

八、StampedLock
1、StampedLock是什么
    是在JDK1.8引入的性能更好的读写锁，不可重入且不支持条件变量Condition。
    不同于一般的Lock类，StampedLock并不是直接实现Lock或ReadWriteLock接口，而是基于CLH锁独立实现的。
    三种读写控制模式
        写锁：独占锁，一把锁只能被一个线程获取。当一个线程获取写锁后，其他请求读锁和写锁的线程必须等待。这里的写锁是不可重入的。
        读锁：共享锁，没有线程获取写锁的情况下，多个线程可以同时持有读锁。如果已经有线程持有写锁，则其他线程请求获取该读锁会被阻塞。这里的写锁是不可重入的。
        乐观读：允许多个线程获取乐观读以及读锁。同时允许一个写线程获取写锁。
2、StampedLock的性能为什么更好
    StampedLock的乐观读允许一个写线程获取写锁，不会导致所有写线程阻塞，也就是当读多写少的时候，写线程有机会获取写锁，减少了线程饥饿的问题。
3、StampedLock适合什么场景
    StampedLock适合读多写少的业务场景，可以作为ReentrantReadWriteLock替代品，性能更好。不过Stamped不可重入，不支持变量条件，对中断操作支持
    也不太友好。
4、StampedLock底层原理
    StampedLock不是直接实现Lock或ReadWriteLock接口，而是基于CLH锁实现的，CLH锁是对自旋锁的一种改良，是一种隐式的链表队列。StampedLock通过
    CLH队列进行线程的管理，通过同步状态值state来表示锁的状态和类型。

九、ThreadLocal
1、ThreadLocal有什么用
    ThreadLocal解决的就是每个线程绑定自己的值。如果创建了一个ThreadLocal变量，那么访问这个这个变量的每个线程都会有这个变量的本地副本。可以使用
    get()和set()方法来获取默认值或将其更改为当前线程所存的副本的值，避免线程安全问题。
2、ThreadLocal的原理
    ThreadLocal可以理解是ThreadLocalMap的封装，封装了变量值。ThreadLocal类可以通过Thread.currentThread()获取当前线程对象后，直接通过
    getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。每个Thread都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal
    为key，Object对象为value的键值对。
3、ThreadLocal内存泄露问题
    ThreadLocalMap中使用的key为ThreadLocal的弱引用，而value是强引用。如果ThreadLocal没有被外部强引用的情况下，在垃圾回收的时候，key会被清理掉，
    而value不会被清理掉。ThreadLocalMap中就出现了key为null的Entry。如果不做任何措施，value永远不会被GC回收，就产生了内存泄露。
    ThreadLocalMap实现中已经考虑了这种情况，在调用set()、get()、remove()方法的时候，会清理掉key为null的记录。使用完ThreadLocal方法后最好
    手动调用remove()。

十、线程池
1、为什么要用线程池
    池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。
    线程池提供了一种限制和管理资源（包括执行一个任务）的方式。每个线程池还维护一些基本统计信息。
2、线程池的好处
    降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。
    提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。
    提高线程的可管理性：线程是稀缺资源如果无限制创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以统一分配，调优和监控。
3、如何创建线程池
（1）ThreadPoolExecutor
    Spring框架的ThreadPoolTaskExecutor
        @Configuration
        public class ThreadPoolConfig {

            @Bean(name = "taskExecutor")
            public TaskExecutor taskExecutor() {
                ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();

                String threadName = "thread-pool-";
                int corePoolSize = Runtime.getRuntime().availableProcessors();

                // 核心线程池
                threadPoolTaskExecutor.setCorePoolSize(corePoolSize);
                // 最大线程数
                threadPoolTaskExecutor.setMaxPoolSize(corePoolSize * 2 + 1);
                // 任务队列大小
                threadPoolTaskExecutor.setQueueCapacity(500);
                // 空闲队列线程存活时间
                threadPoolTaskExecutor.setKeepAliveSeconds(60);
                // 线程名前缀
                threadPoolTaskExecutor.setThreadNamePrefix(threadName);
                // 拒绝策略
                threadPoolTaskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
                // 线程初始化
                threadPoolTaskExecutor.initialize();
                System.out.println("线程池初始化。。。。。。");
                return threadPoolTaskExecutor;
            }
        }
（2）Executor框架的工具类Executors
    FixedThreadPool：固定线程数量的线程池，该线程池中的线程数量始终保持不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。如果没有
        则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。
    SingledThreadPool：只有一个线程的线程池。如果多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。
    CachedThreadPool：可以根据实际情况调整线程数量的线程池。线程池的线程数量不确定，如果有空闲线程可以复用，则优先使用可复用的线程。如果所有线程
        都在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。
    ScheduledThreadPool：给定的延迟后运行任务或定期执行任务的线程池。
4、Executors返回线程池的弊端
    FixedThreadPool和SingleThreadExecutor：使用的是有界阻塞队列是LinkedBlockingQueue，其任务队列的最大长度为Integer.MAX_VALUE，
        可能堆积大量的请求，从而导致OOM。
    CachedThreadPool：使用的是同步队列SynchronousQueue，允许创建的线程数量为Integer.MAX_VALUE，如果任务数量过多且执行速度较慢，可能创建
        大量的线程，从而导致OOM。
    ScheduledThreadPool和SingleThreadScheduledExecutor：使用的无界的延迟阻塞队列为DelayedWorkQueue，任务队列最大长度为Integer.MAX_VALUE，
        可能堆积大量的请求，从而导致OOM。
5、线程池常见参数
    corePoolSize：线程池的核心线程数。
    maximumPoolSize：线程池的最大线程数。一定要大于核心线程数，否则会创建失败。
    keepAliveTime：当线程数大于核心线程数时，多余的空闲线程存活的最长时间。
    unit：时间单位。
    workQueue：任务队列，用来存储等待执行任务的队列。
    threadFactory：线程工厂，用来创建线程，一般默认即可。
    handler：拒绝策略，当提交的任务过多而不能及时处理时，可以定制策略来处理任务。
6、线程池的核心线程会被回收吗？
    ThreadPoolExecutor默认不会回收核心线程。这是为了减少创建线程的开销，因为核心线程池通常是要保持长期活跃的。但是如果线程池是被用于周期性使用
    的场景，且频率不高，可以考虑将allowCoreThreadTimeOut(boolean value) 方法的参数设置为true，就会回收空闲的核心线程了。
7、线程池的拒绝策略
    AbortPolicy：抛出Rejected ExecutionException来拒绝新任务的处理。
    CallerRunsPolicy：调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。
    DiscardPolicy：不处理新任务，直接丢弃。
    DiscardOldesPolicy：此策略将丢弃最早的未处理的任务请求。
8、CallerRunsPolicy策略有什么风险？
    如果想要保证任何一个任务请求都要被执行的话，那选择CallerRunsPolicy。如果走到CallerRunsPolicy是个非常耗时的任务，且处理提交任务的线程是
    主线程，可能导致主线程阻塞，影响程序正常运行。
    如何解决：
    （1）增加阻塞队列BlockingQueue的大小并调整堆内存以容纳更多的任务。
    （2）调整线程池maximumPoolSize参数提高任务处理速度。
    （3）任务持久化
        将任务数据存入到MySQL数据库中。
        Redis缓存任务。
        将任务提交到消息队列中。
    如何实现：实现RejectedExecutionHandler接口自定义拒绝策略，自定义拒绝策略负责将线程池暂时无法处理的任务入库。继承BlockingQueue实现一个
        混合式阻塞队列，该队列包含JDK自带的ArrayBlockingQueue。该混合式阻塞队列需要修改取任务处理的逻辑，也就是重写take()方法，取任务时优先
        从数据库中读取最早的任务，数据库中无任务时再从ArrayBlockingQueue中取任务，以避免饥饿问题。
9、线程池常用的阻塞队列
（1）LinkedBlockingQueue（有界阻塞队列）：容量为Integer.MAX_VALUE。FixedThreadPool最多只能创建核心线程数的线程（核心线程数和最大线程数相等），
    SingledThreadPool只能创建一个线程（核心线程数和最大线程数都是1），二者的任务队列永远不会被放满。
（2）SynchronousQueue（同步队列）：没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则用空闲线程来处理；否则新建一个线程来处理任务。
    也就是CachedThreadPool的最大线程数是Integer.MAX_VALUE，可以理解为线程数是可以无限扩张的，可能会创建大量线程，从而导致OOM。
（3）DelayedWorkQueue（延迟队列）：DelayedWorkQueue添加元素满了之后会自动扩容，增加原来容量的50%，即永远不会阻塞，最大扩容可达Integer.MAX_VALUE。
    ScheduledThreadPool和SingleThreadScheduledExecutor。DelayedWorkQueue的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对
    任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。
（4）ArrayBlockingQueue（有界阻塞队列）：底层由数组实现，容量一旦创建，就不能修改。
10、线程池处理任务的流程
（1）如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。
（2）如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放到任务队列里等待执行。
（3）如果任务队列已经满了，但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。
（4）如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前线程任务会被拒绝，拒绝策略会调用RejectedExecutionHandler.rejectedExecution()方法。
11、线程池在提交任务前，可以提前创建线程吗？
    可以的！ThreadPoolExecutor提供了两个方法在提交任务前，完成核心线程池的创建，从而实现线程池预热的效果：
    prestartCoreThread()：启动一个线程，等待任务，如果已达到核心线程数，返回false，否则返回true；
    prestartAllCoreThreads()：启动所有的核心线程，并返回启动成功的核心线程数。
12、线程池中线程异常后，销毁还是复用
    使用execute()提交任务：当任务通过execute()提交到线程池并在执行过程中抛出异常时，如果这个异常没有在任务内被捕获，那么该异常会导致当前线程终止，
        并且异常会被打印到控制台或日志文件中。线程池会检测到这种线程终止，并创建一个新线程来替换它，从而保持配置的线程数不变。
    使用submit()提交任务：对于通过submit()提交的任务，如果在任务执行中发生异常，这个异常不会打印出来。异常会被封装在由submit()返回的Future对象中，
        当调用Future.get()方法时，可以捕获到一个ExecutionException。在这种情况下，线程不会因为异常而终止，会继续存在于线程池中，准备执行后续
        的任务。
13、如何给线程池命名？
    初始化线程池时要显式命名，方便定位问题。
（1）利用guava的ThreadFactoryBuilder
    ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + '-%d').setDaemon(true).build();
（2）自己实现ThreadFactory
    public class NamingThreadFactory implements ThreadFactory {
        private final AtomicInteger threadNum = new AtomicInteger();
        private final String name;

        public NamingThreadFactory(String name){
            this.name = name;
        }

        @Override
        public Thread newThread(Runnable r){
            Thread t = new Thread();
            t.setName(name + "[#" + threadNum.incrementAndGet() + "]");
            return t;
        }
    }
14、如何设定线程池最大线程数的大小
    CPU密集型任务：N+1，即为CPU核心数+1。比CPU核心多出来的一个线程是为了防止线程偶发的缺页中断，或者其他原因导致的任务暂停而带来的影响。一旦任务
        暂停，CPU就会处于空闲状态，多出来的一个线程可以充分利用CPU的空闲时间。
    IO密集型任务：2N，系统会应用大部分的时间来处理IO交互，而线程在处理IO的时间段内不会占用CPU来处理，就可以将CPU交出给其他线程使用。
15、如何设计一个能够根据任务的优先级来执行的线程池
    使用PriorityBlockingQueue（优先级）阻塞队列作为任务队列。
    PriorityBlockingQueue是一个支持优先级的阻塞队列，可以看作是线程安全的PrioritQueue，两者底层都是使用小顶堆形式的二叉堆，值最小的元素先出队。
    要想让PriorityBlockingQueue实现对任务的排序，传入其中的任务必须是具备排序能力的，有两种方式：
        提交到线程池的任务实现Comparable接口，并重写compareTo方法来指定任务间的优先级比较规则。
        创建PriorityBlockingQueue时传入一个Comparator对象来指定任务间的排序规则。
    这种方案存在风险：
        PriorityBlockingQueue是无界的，可能堆积大量的请求，导致OOM。
        可能会导致饥饿问题，即优先级低的任务长时间得不到执行。
        由于需要队列中的元素进行排序操作，并保证线程安全（并发控制采用的是可重入锁ReentrantLock），因此会降低性能。
    解决OOM问题，继承PriorityBlockingQueue并重写offer方法的逻辑，当插入的元素数量超过指定值就返回false。
    解决饥饿问题，等待时间过长的任务会被移除并重新添加到队列中，但是优先级会被提升。
    性能影响问题，无法避免。
16、线程池参数配置
（1）核心线程数
    核心线程数是线程池中保持活跃的最小线程数，即使处于空闲状态，也不会被销毁。通常配置为系统可用处理器的数量。这种配置能确保系统资源的有效利用，
    同时避免线程上下文切换带来的开销。
（2）最大线程数
    当核心线程都在忙碌且任务队列已满，线程池会创建新的线程，但不超过最大线程数。
    根据任务的特性和系统的负载来决定。如果是CPU密集型，设为N+1。如果是IO密集型设置为2N。
（3）队列容量
    当核心线程都在忙碌，新的任务会被放入队列中等待执行。队列容量配置需要考虑系统的内存、任务的执行和任务的数量。如果队列容量太小，可能导致频繁的
    任务拒绝；如果太大会导致任务等待时间过长。
    根据系统的内存和任务的特性来配置队列容量，通常设置为核心线程数的100-1000倍。
17、核心线程数配置过大产生的问题
    当遇到IO密集型任务，比如写文件的操作，会有多个线程请求分配内存空间，如果文件过大，多线程请求的空间就会比较大，如果内存不足，造成内存溢出，
    抛出OOM异常，并且线程会阻塞等待分配空间，导致效率低下。“Retried waiting for GCLocker too often allocating 262146 words”

十一、Future
1、Future类的作用
    是异步思想的典型运用，主要用在一些需要耗时任务的场景，避免程序一直原地等待耗时任务执行完成，执行效率太低。
2、Callable和Future有什么关系
    FutureTask提供了Future接口的基本实现，常用来封装Callable和Runnable，具有取消任务、查看任务是否执行完成以及获取执行结果的方法。

十二、AQS
1、AQS是什么
    AQS全称为AbstractQueuedSynchronizer，抽象队列同步器。AQS就是一个抽象类，主要用来构建锁和同步器。
2、AQS原理
    AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，
    那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到的线程加入到队列中。
    CLH队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS是将每条请求共享资源封装成CLH锁队列的一个节点来
    实现锁的分配。在CLH同步队列中，一个节点表示一个线程，保存着线程的引用、当前节点在队列中的状态、前驱节点、后继节点。
3、AQS使用什么表示同步状态
    AQS使用int成员变量state表示同步状态，通过内置的线程等待队列来完成获取资源线程的排队工作。
    state变量由volatile修饰，用于展示当前临界资源的获锁情况。状态信息可以通过protected类型的getState()、setState()和compareAndSetState()
    进行操作。并且这几个方法都是final修饰的，在子类中无法被重写。
（1）以ReentrantLock为例，state初始值为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后其他线程再tryAcquire()
    时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其他线程才有机会获取该锁。当然，释放锁之前，A线程是可以重复获取此锁的（state会累加），
    这就是可重入的概念。获取多少次就要释放多少次，这样才能保证state是能回到零态的。
（2）以CountDownLatch为例，任务分为N个子线程去执行，state也初始化为N（N要与线程个数一致）。这N个子线程执行后countDown()一次，state会CAS减一。
    等到所有子线程都执行完后（即state=0），会unpark()主调用线程，然后主调用线程就会从await()函数返回，进行后续操作。
4、Semaphore有什么用
    synchronized和ReentrantLock都是一次只允许一个线程访问某个资源，而Semaphore（信号量）可以用来控制同时访问特定资源的线程数量。
5、Semaphore的原理是什么
    Semaphore是共享锁的一种实现，默认构造AQS的state值为permits。调用Semaphore.acquire()，线程尝试获取许可证，如果state>=0的话，则表示
    可以获取成功。如果state<0的话，则表示许可证数量不足。此时会创建一个Node节点加入阻塞队列，挂起当前线程。
6、CountDownLatch有什么用
    CountDownLatch允许count个线程阻塞在一个地方，直至所有线程的任务都执行完毕。
    CountDownLatch是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再对其设置值，当CountDownLatch使用完毕后，不能再被使用。
7、CountDownLatch的原理是什么
    CountDownLatch是共享锁的一种实现，默认构造AQS的state值为count。当线程使用countDown()方法时，其实使用了tryReleaseShared方法以CAS
    的操作来减少state，直至state为0。当调用await()方法的时候，如果state不为0，那就说明任务还没有执行完，await()方法就会一直阻塞，也就是说
    await()方法之后的语句不会执行。直到count个线程调用了countDown()使state值被减为0，或者调用await()的线程被中断，该线程才会从阻塞中被唤醒，
    await()方法之后的语句得到执行。
8、CyclicBarrier有什么用，原理是什么
    CyclicBarrier和CountDownLatch非常类似，也可以实现线程间的技术等待。
    CyclicBarrier内部通过一个count变量作为计数器，count的初始值为parties属性的初始化值，每当一个线程到了栅栏这里，那么计数器减1.如果count值
    为0了，表示这一代最后一个线程到达栅栏，就尝试执行构造方法中输入的任务。

十三、虚拟线程
1、什么是虚拟线程
    虚拟线程是JDK而不是OS实现的轻量级线程，由JVM调度。许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。
2、虚拟线程和平台线程有什么关系
    